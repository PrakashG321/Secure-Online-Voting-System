<link rel="stylesheet" href="/public/style.css">
 
> git push -u origin online-voting-system
remote: Repository not found.
fatal: repository 'https://github.com/PrakashG321/Secure-Online-Voting-System.git/' not found

 
<%- include('partials/footer') %>
 
 
<%- include('partials/header') %>
 
res.render("home.ejs");
 

import { fileURLToPath } from "url";
const __dirname = dirname(fileURLToPath(import.meta.url));

const app = express();
const port = 3000;

app.use(bodyParser.urlencoded({extended: true}));



app.get("/", (req, res) => {
  res.sendFile(__dirname + "/public/index.html");
});
 
/voting_page.css
 
/voting_page.css
 
/voting_page.cs
 

.timebox {
    
    margin-top: 106px;
    height: 200px;
    width: 200px;
    background-color: rgb(17, 239, 99);
    grid-area: 1/3/3/4;
    margin-left: 38px;
}

.time_msg {
    height: 20px;
    width: 180px;
    margin-left: 10px;
    margin-right: 10px;
    margin-bottom: 15px;
    text-align: center;
    background-color: aliceblue;
}

.timer{
    height: 125px;
    width: 125px;
    background-color: white;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    margin: auto;
    display: flex;
}


.timing{
justify-content: center;
align-items: center;
}

 
body {
    margin: 0;
    padding: 0;
  }
  
  .admin-dashboard {
    font-family: Arial, sans-serif;
    color: #333;
    padding: 20px;
  }
  
  .admin-dashboard h1,
  .admin-dashboard h2 {
    color: #fff;
    background-color: #3366cc;
    padding: 15px;
    margin: 0 0 0 0;
    border-radius: 5px 5px 0 0;
  }
  
  .admin-dashboard table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    overflow: hidden;
  }
  
  .admin-dashboard th {
    background-color: #3366cc;
    color: #fff;
    padding: 15px;
    text-align: left;
  }
  
  .admin-dashboard td {
    background-color: #fff;
    color: #333;
    padding: 15px;
    text-align: left;
  }
  
  .admin-dashboard tr:nth-child(even) td {
    background-color: #f5f5f5;
  }
  
  .admin-dashboard form {
    background-color: #fff;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }
  
  .admin-dashboard input[type="datetime-local"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
  }
  
  .admin-dashboard button[type="submit"] {
    background-color: #3366cc;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  .admin-dashboard button[type="submit"]:hover {
    background-color: #2c5aa3;
  }
  
  #information {
    margin-left: 1000px;
  }
 
body {
  margin: 0;
  padding: 0;
}

.admin-dashboard {
  font-family: Arial, sans-serif;
  color: #333;
  padding: 20px;
}

.admin-dashboard h1,
.admin-dashboard h2 {
  color: #fff;
  background-color: #3366cc;
  padding: 15px;
  margin: 0 0 0 0;
  border-radius: 5px 5px 0 0;
}

.admin-dashboard table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 30px;
  background-color: #3366cc;
  color: #fff;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  border-radius: 0 0 5px 5px;
  overflow: hidden;
}

.admin-dashboard th,
.admin-dashboard td {
  padding: 15px;
  text-align: left;
}

.admin-dashboard tr:nth-child(even) {
  background-color: #e6e6e6;
  color: #333;
}



.admin-dashboard form {
  background-color: #fff;
  padding: 15px;
  border-radius: 5px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
}

.admin-dashboard input[type="datetime-local"] {
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
}

.admin-dashboard button[type="submit"] {
  background-color: #3366cc;
  color: #fff;
  padding: 10px 20px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}

.admin-dashboard button[type="submit"]:hover {
  background-color: #2c5aa3;
}

#information{
  margin-left: 1000px;
}
 
<!DOCTYPE html>
<html>
<head>
  <title>Voting Results</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f4f4f4;
      color: #333;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 5px;
    }

    h1 {
      text-align: center;
      color: #2c3e50;
      margin-top: 0;
    }

    h2 {
      color: #34495e;
      margin-top: 30px;
    }

    ul {
      list-style-type: none;
      padding: 0;
    }

    li {
      padding: 10px;
      background-color: #ecf0f1;
      border-radius: 5px;
      margin-bottom: 10px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      transition: background-color 0.3s ease;
    }

    li:hover {
      background-color: #bdc3c7;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Voting Results</h1>
    <h2>Mayor</h2>
    <ul>
      <% votes.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>

    <h2>Deputy Mayor</h2>
    <ul>
      <% votes_DeputyMayor.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>

    <h2>Ward President</h2>
    <ul>
      <% votes_WardPresident.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>

    <h2>Female Member</h2>
    <ul>
      <% votes_Female.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>

    <h2>Dalit Female Member</h2>
    <ul>
      <% votes_DalitFemale.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>

    <h2>Member</h2>
    <ul>
      <% votes_Member.forEach(function(result) { %>
        <li><%= result.candidate %> - <%= result.votes %> votes</li>
      <% }); %>
    </ul>
  </div>
</body>
</html>
 
<!DOCTYPE html>
<html>
<head>
  <title>Voting Results</title>
</head>
<body>
  <h1>Voting Results</h1>

  <h2>Mayor</h2>
  <ul>
    <% votes.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

  <h2>Deputy Mayor</h2>
  <ul>
    <% votes_DeputyMayor.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

  <h2>Ward President</h2>
  <ul>
    <% votes_WardPresident.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

  <h2>Female Member</h2>
  <ul>
    <% votes_Female.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

  <h2>Dalit Female Member</h2>
  <ul>
    <% votes_DalitFemale.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

  <h2>Member</h2>
  <ul>
    <% votes_Member.forEach(function(result) { %>
      <li><%= result.candidate %> - <%= result.votes %> votes</li>
    <% }); %>
  </ul>

</body>
</html>
 
<a class="nav" href="">Contacts</a>
 
<a id="information"  href="/logout">Logout</a>
 
class="information"
 
 <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
 
   <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
 
       <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
 
  <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
 
 <div class="candidate c2">
                <img class="images" src="/img/candidate_11.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Elon musk</label>
            </div>
 
.timebox {
    
    margin-top: 106px;
    height: 200px;
    width: 200px;
    background-color: rgb(17, 239, 99);
    grid-area: 1/3/3/4;
    margin-left: 38px;
}

.time_msg {
    height: 20px;
    width: 180px;
    margin-left: 10px;
    margin-right: 10px;
    margin-bottom: 15px;
    text-align: center;
    background-color: aliceblue;
}

 

.timer{
    height: 125px;
    width: 125px;
    background-color: white;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    margin: auto;
    display: flex;
}


.timing{
justify-content: center;
align-items: center;
}

 
Candidate 4
 
candidate4
 
Bil Gates
 
Candidate 3
 
candidate3
 
Candidate 1
 
candidate1
 
Candidate 2
 
candidate2
 
Candidate 4
 
candidate4
 
Candidate 3
 
candidate3
 
Candidate 2
 
candidate2
 
Candidate 1
 
<div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
 
.admin-dashboard tr:hover {
  background-color: #e6e6e6;
  color: #333;
}
 
body{
  margin: 0;
  padding: 0;
}

.admin-dashboard {
    font-family: Arial, sans-serif;
    background-color: #f2f2f2;
    color: #333;
    padding: 20px;
  }
  
  .admin-dashboard h1,
  .admin-dashboard h2 {
    color: #fff;
    background-color: #3366cc;
    padding: 15px;
    margin: 0 0 20px 0;
    border-radius: 5px;
  }
  
  .admin-dashboard table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
    background-color: #fff;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    overflow: hidden;
  }
  
  .admin-dashboard th,
  .admin-dashboard td {
    padding: 15px;
    text-align: left;
  }

  
  .admin-dashboard th {
    background-color: #3366cc;
    color: #fff;
  }
  
  .admin-dashboard tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  
  .admin-dashboard tr:hover {
    background-color: #e6e6e6;
  }
  
  .admin-dashboard form {
    background-color: #fff;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }
  
  .admin-dashboard input[type="datetime-local"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
  }
  
  .admin-dashboard button[type="submit"] {
    background-color: #3366cc;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  .admin-dashboard button[type="submit"]:hover {
    background-color: #2c5aa3;
  }
 

  .admin-dashboard tr{
    margin-top: 10px;
  }
 
<h2>Votes for deputy mayor</h2>
            <table>
              <tr>
                <th>Candidate</th>
                <th>Voter_Id</th>
              </tr>
              <% votes.forEach(vote=> { %>
                <tr>
                  <td>
                    <%= vote.candidate %>
                  </td>
                  <td>
                    <%= vote.voter_id %>
                  </td>
                </tr>
                <% }) %>
            </table>
 
votesData
 
, { success: 'Thank you for voting!', error: '' }
 
, { success: 'Thank you for voting!', error: '' }
 
/dalit_female
 
female_member
 
female_member
 
/female_member
 
, { success: 'Thank you for voting!', error: '' }
 
_mayor_voting
 
ward_president
 
ward_president
 
ward-president-vote
 
/deputy-mayor-vote
 
/ward-president-vote
 
deputy_mayor_votes
 
deputy_mayor_voting.ejs', { success: 'Thank you for voting!', error: '' }
 
/deputy-mayor-vote
 
app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('deputy_mayor_voting.ejs');
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

app.post("/deputy-mayor_vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    const checkResult = await db.query("SELECT * FROM deputy_mayor_votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('deputy_mayor_voting.ejs', { error: 'You have already voted.', success: '' });
    }

    await db.query("INSERT INTO deputy_mayor_votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('deputy_mayor_votingg.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('deputy_mayor_voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

 
  if (!isVotingAllowed()) {
      return res.render('deputy_mayor_voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

 
try {
    if (!isVotingAllowed()) {
      return res.render('deputy_mayor_voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }
 
sub-mayor_voting
 
voting
 
sub-mayor_votin
 
sub-mayor_voting
 
voting.ejs
 
, { success: 'Thank you for voting!', error: '' }
 
voting.ejs
 
, { success: 'Thank you for voting!', error: '' }
 

function handleMayorSelection(event) {
  const mayorSection = document.querySelector('.background');
  const deputyMayorSection = document.getElementById('deputyMayorSection');
  const deputyMayorCandidateForm = deputyMayorSection.querySelector('.candidate-form');
  const wardPresidentSection = document.getElementById('wardPresidentSection');
  const femaleMemberSection = document.getElementById('femaleMemberSection');
  const dalitFemaleMemberSection = document.getElementById('dalitFemaleMemberSection');
  const memberSection = document.getElementById('memberSection');

  // Hide all sections except the mayor section
  deputyMayorSection.style.display = 'none';
  deputyMayorCandidateForm.style.display = 'none'; // Hide the deputy mayor candidate form initially
  wardPresidentSection.style.display = 'none';
  femaleMemberSection.style.display = 'none';
  dalitFemaleMemberSection.style.display = 'none';
  memberSection.style.display = 'none';

  // Check if a mayor candidate is selected
  const selectedCandidate = event.target.value;
  if (selectedCandidate) {
    // Show the deputy mayor section and candidate form
    deputyMayorSection.style.display = 'block';
    deputyMayorCandidateForm.style.display = 'block';
  }
}

// Add event listener to the mayor section
const mayorForm = document.querySelector('.background');
mayorForm.addEventListener('change', handleMayorSelection);

// Add event listener to the deputy mayor section
const deputyMayorForm = document.querySelector('form[action="/vote/deputy-mayor"]');
deputyMayorForm.addEventListener('submit', handleDeputyMayorSubmit);

function handleDeputyMayorSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  // Perform any necessary server-side operations here

  // Show the ward president section
  const wardPresidentSection = document.getElementById('wardPresidentSection');
  wardPresidentSection.style.display = 'block';
}

// Add event listener to the ward president section
const wardPresidentForm = document.querySelector('form[action="/vote/ward-president"]');
wardPresidentForm.addEventListener('submit', handleWardPresidentSubmit);

function handleWardPresidentSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  // Perform any necessary server-side operations here

  // Show the female member section
  const femaleMemberSection = document.getElementById('femaleMemberSection');
  femaleMemberSection.style.display = 'block';
}

// Add event listener to the female member section
const femaleMemberForm = document.querySelector('form[action="/vote/female-member"]');
femaleMemberForm.addEventListener('submit', handleFemaleMemberSubmit);

function handleFemaleMemberSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  // Perform any necessary server-side operations here

  // Show the dalit female member section
  const dalitFemaleMemberSection = document.getElementById('dalitFemaleMemberSection');
  dalitFemaleMemberSection.style.display = 'block';
}

// Add event listener to the dalit female member section
const dalitFemaleMemberForm = document.querySelector('form[action="/vote/dalit-female-member"]');
dalitFemaleMemberForm.addEventListener('submit', handleDalitFemaleMemberSubmit);

function handleDalitFemaleMemberSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  // Perform any necessary server-side operations here

  // Show the member section
  const memberSection = document.getElementById('memberSection');
  memberSection.style.display = 'block';
}

// Add event listener to the member section
const memberForm = document.querySelector('form[action="/vote/member"]');
memberForm.addEventListener('submit', handleMemberSubmit);

function handleMemberSubmit(event) {
  event.preventDefault(); // Prevent the default form submission

  // Perform any necessary server-side operations here

  // Display a success message or redirect to another page
  const message = document.getElementById('message');
  message.innerHTML = '<p class="success_msg">Thank you for voting!</p>';
}
 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voting Page</title>
  <link rel="stylesheet" href="/voting_page.css">
</head>
<body>
  <div class="information">
    <p>View the list of candidates and their profiles below. <br> Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the allotted time expires"</p>
    <span id="currentDate"></span>
  </div>
  <div id="message">
    <% if (typeof success !== 'undefined' && success) { %>
      <p class="success_msg"><%= success %></p>
    <% } else if (typeof error !== 'undefined' && error) { %>
      <p class="error_msg"><%= error %></p>
    <% } %>
  </div>

  <!-- Mayor Voting Section -->
  <form class="background" action="/vote" method="post">
    <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

    <div class="candidate-form">
        <div class="candidate c1">
            <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
            <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
            <label for="candidate1">Balen Shah</label>
        </div>
        <div class="candidate c2">
            <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
            <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                for="candidate2">Harka Sampang</label>
        </div>
        <div class="candidate c3">
            <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
            <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
            <label for="candidate3">Rajesh Man Singh</label>
        </div>
        <div class="candidate c4">
            <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
            <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
            <label for="candidate4">Dhana Raj Acharya</label>
        </div>

        <div class="timebox">
            <div class="time_msg">Time Remaining:</div>
            <div class="timer">
                <p class="timing">00:00:00</p>
            </div>
        </div>
    </div>
    </div>
    <input type="submit" value="Vote">
</form>

  <!-- Deputy Mayor Voting Section (Hidden Initially) -->
  <div id="deputyMayorSection" style="display: none;">
    <form class="background" action="/vote/deputy-mayor" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form" style="display: none;">  <!-- Add this line -->
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="deputyCandidate1" name="candidate" value="deputyCandidate1">
          <label for="deputyCandidate1">John Doe</label>
        </div>
        <!-- Add more deputy mayor candidates here -->
      </div> 
      <input type="submit" value="Vote">
    </form>
  </div>

  <!-- Ward President Voting Section (Hidden Initially) -->
  <div id="wardPresidentSection" style="display: none;">
    <form class="background" action="/vote/ward-president" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form">
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="wardPresidentCandidate1" name="candidate" value="wardPresidentCandidate1">
          <label for="wardPresidentCandidate1">Jane Smith</label>
        </div>
        <!-- Add more ward president candidates here -->
      </div>
      <input type="submit" value="Vote">
    </form>
  </div>

  <!-- Female Member Voting Section (Hidden Initially) -->
  <div id="femaleMemberSection" style="display: none;">
    <form class="background" action="/vote/female-member" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form">
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="femaleMemberCandidate1" name="candidate" value="femaleMemberCandidate1">
          <label for="femaleMemberCandidate1">Sarah Johnson</label>
        </div>
        <!-- Add more female member candidates here -->
        
      </div>

      <input type="submit" value="Vote">
    </form>
  </div>

  <!-- Dalit Female Member Voting Section (Hidden Initially) -->
  <div id="dalitFemaleMemberSection" style="display: none;">
    <form class="background" action="/vote/dalit-female-member" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form">
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="dalitFemaleMemberCandidate1" name="candidate" value="dalitFemaleMemberCandidate1">
          <label for="dalitFemaleMemberCandidate1">Emily Wilson</label>
        </div>
        <!-- Add more dalit female member candidates here -->
      </div>
      <input type="submit" value="Vote">
    </form>
  </div>

  <!-- Member Voting Section (Hidden Initially) -->
  <div id="memberSection" style="display: none;">
    <form class="background" action="/vote/member" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form">
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="memberCandidate1" name="candidate" value="memberCandidate1">
          <label for="memberCandidate1">Michael Brown</label>
        </div>
        <!-- Add more member candidates here -->
       
      </div>
      
      <input type="submit" value="Vote">
    </form>
  </div>

  <script src="/index.js"></script>
</body>
</html>
 
app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

app.post('/vote/deputy-mayor', async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await pool.query('SELECT * FROM votes WHERE voter_id = $1 AND position = \'deputy-mayor\'', [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted for the deputy mayor.', success: '' });
    }

    await pool.query('INSERT INTO votes (candidate, voter_id, position) VALUES ($1, $2, \'deputy-mayor\')', [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id} for deputy mayor`);
    res.render('voting.ejs', { success: 'Thank you for voting for the deputy mayor!', error: '', nextVotingStep: 'ward-president' });
  } catch (err) {
    console.error('Error casting vote:', err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

// Route for ward president voting
app.post('/vote/ward-president', async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await pool.query('SELECT * FROM votes WHERE voter_id = $1 AND position = \'ward-president\'', [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted for the ward president.', success: '' });
    }

    await pool.query('INSERT INTO votes (candidate, voter_id, position) VALUES ($1, $2, \'ward-president\')', [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id} for ward president`);
    res.render('voting.ejs', { success: 'Thank you for voting for the ward president!', error: '', nextVotingStep: 'female-member' });
  } catch (err) {
    console.error('Error casting vote:', err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

// Route for female member voting
app.post('/vote/female-member', async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await pool.query('SELECT * FROM votes WHERE voter_id = $1 AND position = \'female-member\'', [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted for the female member.', success: '' });
    }

    await pool.query('INSERT INTO votes (candidate, voter_id, position) VALUES ($1, $2, \'female-member\')', [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id} for female member`);
    res.render('voting.ejs', { success: 'Thank you for voting for the female member!', error: '', nextVotingStep: 'dalit-female-member' });
  } catch (err) {
    console.error('Error casting vote:', err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

// Route for dalit female member voting
app.post('/vote/dalit-female-member', async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await pool.query('SELECT * FROM votes WHERE voter_id = $1 AND position = \'dalit-female-member\'', [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted for the dalit female member.', success: '' });
    }

    await pool.query('INSERT INTO votes (candidate, voter_id, position) VALUES ($1, $2, \'dalit-female-member\')', [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id} for dalit female member`);
    res.render('voting.ejs', { success: 'Thank you for voting for the dalit female member!', error: '', nextVotingStep: 'member' });
  } catch (err) {
    console.error('Error casting vote:', err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

// Route for member voting
app.post('/vote/member', async (req, res) => {
  const candidate = req.body.candidate;

  try {
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    const checkResult = await pool.query('SELECT * FROM votes WHERE voter_id = $1 AND position = \'member\'', [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted for the member.', success: '' });
    }

    await pool.query('INSERT INTO votes (candidate, voter_id, position) VALUES ($1, $2, \'member\')', [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id} for member`);
    res.render('voting.ejs', { success: 'Thank you for voting for the member!', error: '' });
  } catch (err) {
    console.error('Error casting vote:', err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});
 
function togglePasswordVisibility(inputId) {
  const passwordInput = document.getElementById(inputId);
  const togglePasswordIcon = passwordInput.nextElementSibling.querySelector('i');

  if (passwordInput.type === 'password') {
    passwordInput.type = 'text';
    togglePasswordIcon.classList.remove('fa-eye');
    togglePasswordIcon.classList.add('fa-eye-slash');
  } else {
    passwordInput.type = 'password';
    togglePasswordIcon.classList.remove('fa-eye-slash');
    togglePasswordIcon.classList.add('fa-eye');
  }
}

function validateForm() {
  const isValidPhoneNumber = validatePhoneNumber();
  const isValidCitizenshipNumber = validateCitizenshipNumber();
  return isValidPhoneNumber && isValidCitizenshipNumber;
}

function validatePhoneNumber() {
  const input = document.getElementById("phone_no").value;
  const errorSpan = document.getElementById("phoneNoError");

  if (/^\d{10}$/.test(input)) {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Please enter exactly 10 digits";
    return false;
  }
}

function validateCitizenshipNumber() {
  const input = document.getElementById("citizenship_no").value;
  const errorSpan = document.getElementById("citizenshipNoError");

  if (input !== "") {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Citizenship number is required";
    return false;
  }
}

// Function to update the current date
function updateCurrentDate() {
  const currentDate = new Date();
  const day = currentDate.getDate();
  const month = currentDate.getMonth() + 1;
  const year = currentDate.getFullYear();
  const formattedDate = `${day}/${month}/${year}`;
  document.getElementById('currentDate').textContent = `Current Date: ${formattedDate}`;
}

window.onload = updateCurrentDate;

const endDateInput = document.getElementById('endDateInput').value;
const endDate = new Date(endDateInput);

function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true;
  }
}

function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting();
  }
}

setInterval(updateTimer, 1000);
updateTimer();

function handleMayorSelection(event) {
  const mayorSection = document.querySelector('.background');
  const deputyMayorSection = document.getElementById('deputyMayorSection');
  const wardPresidentSection = document.getElementById('wardPresidentSection');
  const femaleMemberSection = document.getElementById('femaleMemberSection');
  const dalitFemaleMemberSection = document.getElementById('dalitFemaleMemberSection');
  const memberSection = document.getElementById('memberSection');

  // Hide all sections except the mayor section
  deputyMayorSection.style.display = 'none';
  wardPresidentSection.style.display = 'none';
  femaleMemberSection.style.display = 'none';
  dalitFemaleMemberSection.style.display = 'none';
  memberSection.style.display = 'none';

  // Check if a mayor candidate is selected
  const selectedCandidate = event.target.value;
  if (selectedCandidate) {
    // Show the deputy mayor section
    deputyMayorSection.style.display = 'block';
  }
}

// Add event listener to the mayor section
const mayorForm = document.querySelector('.background');
mayorForm.addEventListener('change', handleMayorSelection);
 
function togglePasswordVisibility(inputId) {
  const passwordInput = document.getElementById(inputId);
  const togglePasswordIcon = passwordInput.nextElementSibling.querySelector('i');

  if (passwordInput.type === 'password') {
    passwordInput.type = 'text';
    togglePasswordIcon.classList.remove('fa-eye');
    togglePasswordIcon.classList.add('fa-eye-slash');
  } else {
    passwordInput.type = 'password';
    togglePasswordIcon.classList.remove('fa-eye-slash');
    togglePasswordIcon.classList.add('fa-eye');
  }
}

function validateForm() {
  const isValidPhoneNumber = validatePhoneNumber();
  const isValidCitizenshipNumber = validateCitizenshipNumber();
  return isValidPhoneNumber && isValidCitizenshipNumber;
}

function validatePhoneNumber() {
  const input = document.getElementById("phone_no").value;
  const errorSpan = document.getElementById("phoneNoError");

  if (/^\d{10}$/.test(input)) {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Please enter exactly 10 digits";
    return false;
  }
}

function validateCitizenshipNumber() {
  const input = document.getElementById("citizenship_no").value;
  const errorSpan = document.getElementById("citizenshipNoError");

  if (input !== "") {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Citizenship number is required";
    return false;
  }
}

// Function to update the current date
function updateCurrentDate() {
  const currentDate = new Date();
  const day = currentDate.getDate();
  const month = currentDate.getMonth() + 1;
  const year = currentDate.getFullYear();
  const formattedDate = `${day}/${month}/${year}`;
  document.getElementById('currentDate').textContent = `Current Date: ${formattedDate}`;
}

window.onload = updateCurrentDate;

const endDateInput = document.getElementById('endDateInput').value;
const endDate = new Date(endDateInput);

function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true;
  }
}

function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting();
  }
}

setInterval(updateTimer, 1000);
updateTimer();

function handleMayorSelection(event) {
  const mayorSection = document.querySelector('.background');
  const deputyMayorSection = document.getElementById('deputyMayorSection');
  const wardPresidentSection = document.getElementById('wardPresidentSection');
  const femaleMemberSection = document.getElementById('femaleMemberSection');
  const dalitFemaleMemberSection = document.getElementById('dalitFemaleMemberSection');
  const memberSection = document.getElementById('memberSection');

  // Hide all sections except the mayor section
  deputyMayorSection.style.display = 'none';
  wardPresidentSection.style.display = 'none';
  femaleMemberSection.style.display = 'none';
  dalitFemaleMemberSection.style.display = 'none';
  memberSection.style.display = 'none';

  // Check if a mayor candidate is selected
  const selectedCandidate = event.target.value;
  if (selectedCandidate) {
    // Show the deputy mayor section
    deputyMayorSection.style.display = 'block';
  }
}

// Add event listener to the mayor section
const mayorForm = document.querySelector('.background');
mayorForm.addEventListener('change', handleMayorSelection);
 
 <!-- Add this line -->
 
 <div id="deputyMayorSection" style="display: none;">
    <form class="background" action="/vote/deputy-mayor" method="post">
      <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
      <div class="candidate-form">
        <div class="candidate c1">
          <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
          <input class="selector" type="radio" id="deputyCandidate1" name="candidate" value="deputyCandidate1">
          <label for="deputyCandidate1">John Doe</label>
        </div>
       
        <!-- Add more deputy mayor candidates here -->
      </div>
      <input type="submit" value="Vote">
    </form>
  </div>
 
function togglePasswordVisibility(inputId) {
  const passwordInput = document.getElementById(inputId);
  const togglePasswordIcon = passwordInput.nextElementSibling.querySelector('i');

  if (passwordInput.type === 'password') {
    passwordInput.type = 'text';
    togglePasswordIcon.classList.remove('fa-eye');
    togglePasswordIcon.classList.add('fa-eye-slash');
  } else {
    passwordInput.type = 'password';
    togglePasswordIcon.classList.remove('fa-eye-slash');
    togglePasswordIcon.classList.add('fa-eye');
  }
}

function validateForm() {
  const isValidPhoneNumber = validatePhoneNumber();
  const isValidCitizenshipNumber = validateCitizenshipNumber();
  return isValidPhoneNumber && isValidCitizenshipNumber;
}

function validatePhoneNumber() {
  const input = document.getElementById("phone_no").value;
  const errorSpan = document.getElementById("phoneNoError");

  if (/^\d{10}$/.test(input)) {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Please enter exactly 10 digits";
    return false;
  }
}

function validateCitizenshipNumber() {
  const input = document.getElementById("citizenship_no").value;
  const errorSpan = document.getElementById("citizenshipNoError");

  if (input !== "") {
    errorSpan.textContent = "";
    return true;
  } else {
    errorSpan.textContent = "Citizenship number is required";
    return false;
  }
}

// Function to update the current date
function updateCurrentDate() {
  const currentDate = new Date();
  const day = currentDate.getDate();
  const month = currentDate.getMonth() + 1;
  const year = currentDate.getFullYear();
  const formattedDate = `${day}/${month}/${year}`;
  document.getElementById('currentDate').textContent = `Current Date: ${formattedDate}`;
}

window.onload = updateCurrentDate;

const endDateInput = document.getElementById('endDateInput').value;
const endDate = new Date(endDateInput);

function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true;
  }
}

function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting();
  }
}

setInterval(updateTimer, 1000);
updateTimer();

function handleMayorSelection(event) {
  const mayorSection = document.querySelector('.background');
  const deputyMayorSection = document.getElementById('deputyMayorSection');
  const wardPresidentSection = document.getElementById('wardPresidentSection');
  const femaleMemberSection = document.getElementById('femaleMemberSection');
  const dalitFemaleMemberSection = document.getElementById('dalitFemaleMemberSection');
  const memberSection = document.getElementById('memberSection');

  // Hide all sections except the mayor section
  deputyMayorSection.style.display = 'none';
  wardPresidentSection.style.display = 'none';
  femaleMemberSection.style.display = 'none';
  dalitFemaleMemberSection.style.display = 'none';
  memberSection.style.display = 'none';

  // Check if a mayor candidate is selected
  const selectedCandidate = event.target.value;
  if (selectedCandidate) {
    // Show the deputy mayor section
    deputyMayorSection.style.display = 'block';
  }
}

// Add event listener to the mayor section
const mayorForm = document.querySelector('.background');
mayorForm.addEventListener('change', handleMayorSelection);


 
 
 <div class="candidate c2">
          <img class="images" src="/img/candidate_2.jpg" alt="Candidate 2">
          <input class="selector" type="radio" id="deputyCandidate2" name="candidate" value="deputyCandidate2">
          <label for="deputyCandidate2">John Doe</label>
        </div>
 
<th>Timestamp</th>
 
created_at::timestamp AS timestamp
 
, voter_id, created_at::timestamp AS timestamp
 
    <td>
                    <%= new Date(vote.timestamp).toLocaleString(undefined, {
                      dateStyle: 'full',
                      timeStyle: 'long',
                    }) %>
                  </td>
 
to_timestamp(created_at)
 
 <%= vote.timestamp %>
 
created_at
 
 function updateCountdown(endDate) {
    const now = new Date();
    const diff = endDate.getTime() - now.getTime();
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff / (1000 * 60)) % 60);
    const seconds = Math.floor((diff / 1000) % 60);
    countdownElement.textContent = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}`;
  }

  function padZero(value) {
    return value.toString().padStart(2, '0');
  }
});
 
  const endDate = new Date('<%= endDate %>');
  updateCountdown(endDate);
  setInterval(() => updateCountdown(endDate), 1000);
 

document.addEventListener('DOMContentLoaded', () => {
  const verifyUsersBtn = document.getElementById('verifyUsersBtn');
  const setEndDateBtn = document.getElementById('setEndDateBtn');
  const countdownElement = document.getElementById('countdown');

  verifyUsersBtn.addEventListener('click', () => {
    console.log('Verify Users button clicked');
  });

  setEndDateBtn.addEventListener('click', () => {
    console.log('Set End Date button clicked');
  });

 
<form class="background" action="/vote/mayor" method="post">
    <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
    <div class="candidate-form">
      <div class="candidate c1">
        <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
        <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
        <label for="candidate1">Balen Shah</label>
      </div>
      <div class="candidate c2">
        <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
        <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
            for="candidate2">Harka Sampang</label>
    </div>
    <div class="candidate c3">
        <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
        <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
        <label for="candidate3">Rajesh Man Singh</label>
    </div>
    <div class="candidate c4">
        <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
        <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
        <label for="candidate4">Dhana Raj Acharya</label>
    </div>
      <!-- Add more mayor candidates here -->
    </div>
    <input type="submit" value="Vote">
  </form>
 
  <form class="background" action="/vote/mayor" method="post">
    <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
    <div class="candidate-form">
      <div class="candidate c1">
        <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
        <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
        <label for="candidate1">Balen Shah</label>
      </div>
      <div class="candidate c2">
        <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
        <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
            for="candidate2">Harka Sampang</label>
    </div>
    <div class="candidate c3">
        <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
        <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
        <label for="candidate3">Rajesh Man Singh</label>
    </div>
    <div class="candidate c4">
        <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
        <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
        <label for="candidate4">Dhana Raj Acharya</label>
    </div>
      <!-- Add more mayor candidates here -->
    </div>
    <input type="submit" value="Vote">
  </form>
 
 <div class="timebox">
            <div class="time_msg">Time Remaining:</div>
            <div class="timer">
                <p class="timing">00:00:00</p>
            </div>
        </div>
 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
 res.status(500).send("Error updating end date");
 
res.status(200).send("End date updated successfully");
 
Error deleting user
 
Error deleting user
 
 // Delete the voter
  await db.query("DELETE FROM voters WHERE id = $1", [userId]);
 
  // Start a transaction
    await db.query("BEGIN");
    // Delete the voter
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    // Commit the transaction
    await db.query("COMMIT");
    const usersData = await db.query('SELECT * FROM voters');
    const users = usersData.rows;

    const votesData = await db.query('SELECT * FROM votes');
    const votes = votesData.rows;
 
await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    // Commit the transaction
 
// Start a transaction
    await db.query("BEGIN");
    // Delete the voter
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    // Commit the transaction
    await db.query("COMMIT");
    
    const usersData = await db.query('SELECT * FROM voters');
    const users = usersData.rows;

    const votesData = await db.query('SELECT * FROM votes');
    const votes = votesData.rows;
 
 console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
 
 res.status(200).send("End date updated successfully");
 
"Error deleting user"
 
// Start a transaction
    await db.query("BEGIN");
    // Delete the voter
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    // Commit the transaction
    await db.query("COMMIT");
 
<% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Display success message -->
    <% if (typeof success !== 'undefined') { %>
      <div class="alert alert-success"><%= success %></div>
    <% } %>
 
users,
 
app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Start a transaction
    await db.query("BEGIN");

    // Delete the voter
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);

    // Commit the transaction
    await db.query("COMMIT");

    res.status(200).send("User and associated votes deleted successfully");
  } catch (err) {
    // Rollback the transaction in case of an error
    await db.query("ROLLBACK");

    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});
 
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="/admin.css">
</head>

<body>
  <div class="admin-dashboard">
    <h1>Admin Dashboard</h1>

    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Display success message -->
    <% if (typeof success !== 'undefined') { %>
      <div class="alert alert-success"><%= success %></div>
    <% } %>

    <h2>Voters</h2>
    <table>
      <tr>
        <th>Full Name</th>
        <th>Email</th>
        <th>Phone No.</th>
        <th>Address</th>
        <th>Citizenship No.</th>
        <th>Citizenship Document</th>
        <th>Action</th>
      </tr>
      <% users.forEach(user=> { %>
        <tr>
          <td>
            <%= user.first_name + ' ' + user.last_name %>
          </td>
          <td>
            <%= user.email %>
          </td>
          <td>
            <%= user.phone_no %>
          </td>
          <td>
            <%= user.address %>
          </td>
          <td>
            <%= user.citizenship_no %>
          </td>
          <td>
            <% const fileType=getFileType(user.citizenship_document); %>
              <% if (fileType==='pdf' || fileType==='image' ) { %>
                <a href="/uploads/<%= user.citizenship_document %>" target="_blank">View Document</a>
                <% } else { %>
                  <span>Unknown file type</span>
                  <% } %>
          </td>
          <td>
            <form action="/admin/delete-user" method="POST" style="display: inline;">
              <input type="hidden" name="userId" value="<%= user.id %>">
              <button type="submit">Delete</button>
            </form>
          </td>
        </tr>
        <% }) %>
    </table>
    <h2>Votes</h2>
    <table>
      <tr>
        <th>Candidate</th>
        <th>Voter_Id</th>
        <th>Timestamp</th>
      </tr>
      <% votes.forEach(vote=> { %>
        <tr>
          <td>
            <%= vote.candidate %>
          </td>
          <td>
            <%= vote.voter_id %>
          </td>
          <td>
            <%= vote.timestamp %>
          </td>
        </tr>
        <% }) %>
    </table>
    <h2>Update End Date</h2>
    <form action="/admin/update-end-date" method="POST">
      <label for="newEndDate">New End Date:</label>
      <input type="datetime-local" id="newEndDate" name="newEndDate" value="<%= endDate %>">
      <button type="submit">Update</button>
    </form>
  </div>
</body>

</html>
 
res.status(500).send("Error updating end date");
 
res.status(200).send("End date updated successfully");
 
app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});
 
app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Start a transaction
    await db.query("BEGIN");

    // Delete the voter
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);

    // Commit the transaction
    await db.query("COMMIT");

    res.status(200).send("User and associated votes deleted successfully");
  } catch (err) {
    // Rollback the transaction in case of an error
    await db.query("ROLLBACK");

    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});
 
  // User not found, render the admin-login.ejs with an error message
 
app.post('/admin-login', (req, res, next) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM admins WHERE username = $1', [username])
    .then(result => {
      if (result.rows.length === 0) {
        return res.render('admin-login.ejs', { error: 'Invalid username or password' });
      }

      const admin = result.rows[0];
      bcrypt.compare(password, admin.password, (err, isMatch) => {
        if (err) {
          return next(err);
        }
        if (!isMatch) {
          return res.render('admin-login.ejs', { error: 'Invalid username or password' });
        }

        req.session.isAdmin = true;
        return res.redirect('/admin/dashboard');
      });
    })
    .catch(err => {
      console.error(err);
      return res.render('admin-login.ejs', { error: 'An error occurred' });
    });
});
 
app.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.render("login.ejs", { error: "Invalid email or password" });
    }
    req.login(user, (err) => {
      if (err) {
        return next(err);
      }
      return res.redirect("/voting");
    });
  })(req, res, next);
});

passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              return cb(null, user);
            } else {
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>

<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
            Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the
            allotted time expires"</p>
        <span id="currentDate"></span>

    </div>

    <div id="message">
        <% if (typeof success !=='undefined' && success) { %>
            <p class="succss_msg">
                <%= success %>
            </p>
            <% } else if (typeof error !=='undefined' && error) { %>
                <p class="error_msg">
                    <%= error %>
                </p>
                <% } %>
    </div>

    <form class="background" action="/vote" method="post">
        <input type="hidden" id="endDateInput" value="<%= locals.endDate %>">

        <div class="candidate-form">
            <div class="candidate c1">
                <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
                <input class="selector" type="radio" id="candidate1" name="candidate" value="candidate1">
                <label for="candidate1">Balen Shah</label>
            </div>
            <div class="candidate c2">
                <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
                <input class="selector" type="radio" id="candidate2" name="candidate" value="candidate2"><label
                    for="candidate2">Harka Sampang</label>
            </div>
            <div class="candidate c3">
                <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
                <input class="selector" type="radio" id="candidate3" name="candidate" value="candidate3">
                <label for="candidate3">Rajesh Man Singh</label>
            </div>
            <div class="candidate c4">
                <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
                <input class="selector" type="radio" id="candidate4" name="candidate" value="candidate4">
                <label for="candidate4">Dhana Raj Acharya</label>
            </div>

            <div class="timebox">
                <div class="time_msg">Time Remaining:</div>
                <div class="timer">
                    <p class="timing">00:00:00</p>
                </div>
            </div>
        </div>
        </div>
        <input type="submit" value="Vote">
    </form>



    </script>

    <script src="/index.js"></script>
</body>

</html>
 
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
 
content="width=device-width, initial-scale=1.0"
 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="/admin-dashboard.css">
</head>
<body>
  <div class="admin-dashboard">
    <h1>Admin Dashboard</h1>
    <h2>Voters</h2>
    <table>
      <tr>
        <th>Full Name</th>
        <th>Email</th>
        <th>Phone No.</th>
        <th>Address</th>
        <th>Citizenship No.</th>
        <th>Citizenship Document</th>
        <th>Action</th>
      </tr>
      <% users.forEach(user => { %>
        <tr>
          <td><%= user.first_name + ' ' + user.last_name %></td>
          <td><%= user.email %></td>
          <td><%= user.phone_no %></td>
          <td><%= user.address %></td>
          <td><%= user.citizenship_no %></td>
          <td>
            <% const fileType = getFileType(user.citizenship_document); %>
            <% if (fileType === 'pdf' || fileType === 'image') { %>
              <a href="/uploads/<%= user.citizenship_document %>" target="_blank">View Document</a>
            <% } else { %>
              <span>Unknown file type</span>
            <% } %>
          </td>
          <td>
            <form action="/admin/delete-user" method="POST" style="display: inline;">
              <input type="hidden" name="userId" value="<%= user.id %>">
              <button type="submit">Delete</button>
            </form>
          </td>
        </tr>
      <% }) %>
    </table>
    <h2>Votes</h2>
    <table>
      <tr>
        <th>Candidate</th>
        <th>Voter_Id</th>
        <th>Timestamp</th>
      </tr>
      <% votes.forEach(vote => { %>
        <tr>
          <td><%= vote.candidate %></td>
          <td><%= vote.voter_id %></td>
          <td><%= vote.timestamp %></td>
        </tr>
      <% }) %>
    </table>
    <h2>Update End Date</h2>
    <form action="/admin/update-end-date" method="POST">
      <label for="newEndDate">New End Date:</label>
      <input type="datetime-local" id="newEndDate" name="newEndDate" value="<%= endDate %>">
      <button type="submit">Update</button>
    </form>
  </div>
</body>
</html>
 
/* body {
    font-family: Arial, sans-serif;
    background-color: #f2f2f2;
    color: #333;
    margin: 0;
    padding: 20px;
  }
  
  h1, h2 {
    color: #fff;
    background-color: #3366cc;
    padding: 15px;
    margin: 0 0 20px 0;
    border-radius: 5px;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 30px;
    background-color: #fff;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    overflow: hidden;
  }
  
  th, td {
    padding: 15px;
    text-align: left;
  }
  
  th {
    background-color: #3366cc;
    color: #fff;
  }
  
  tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  
  tr:hover {
    background-color: #e6e6e6;
  }
  
  form {
    background-color: #fff;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  }
  
  input[type="datetime-local"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
  }
  
  button[type="submit"] {
    background-color: #3366cc;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }
  
  button[type="submit"]:hover {
    background-color: #2c5aa3;
  } */
 
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="/admin-dashboard.css">

</head>

<body>
  <h1>Admin Dashboard</h1>

  <h2>Voters</h2>
  <table>
    <tr>
      <th>Full Name</th>
      <th>Email</th>
      <th>Phone No.</th>
      <th>Address</th>
      <th>Citizenship No.</th>
      <th>Citizenship Document</th>
      <th>Action</th>
    </tr>
    <% users.forEach(user=> { %>
      <tr>
        <td>
          <%= user.first_name + ' ' + user.last_name %>
        </td>
        <td>
          <%= user.email %>
        </td>
        <td>
          <%= user.phone_no %>
        </td>
        <td>
          <%= user.address %>
        </td>
        <td>
          <%= user.citizenship_no %>
        </td>
        <td>
          <% const fileType = getFileType(user.citizenship_document); %>
          <% if (fileType === 'pdf' || fileType === 'image') { %>
            <a href="/uploads/<%= user.citizenship_document %>" target="_blank">View Document</a>
          <% } else { %>
            <span>Unknown file type</span>
          <% } %>
        </td>
        <td>
          <form action="/admin/delete-user" method="POST" style="display: inline;">
            <input type="hidden" name="userId" value="<%= user.id %>">
            <button type="submit">Delete</button>
          </form>
        </td>
      </tr>
      <% }) %>
  </table>

  <h2>Votes</h2>
  <table>
    <tr>
      <th>Candidate</th>
      <th>Voter_Id</th>
      <th>Timestamp</th>
    </tr>
    <% votes.forEach(vote=> { %>
      <tr>
        <td>
          <%= vote.candidate %>
        </td>
        <td>
          <%= vote.voter_id %>
        </td>
        <td>
          <%= vote.timestamp %>
        </td>
      </tr>
      <% }) %>
  </table>

  <h2>Update End Date</h2>
  <form action="/admin/update-end-date" method="POST">
    <label for="newEndDate">New End Date:</label>
    <input type="datetime-local" id="newEndDate" name="newEndDate" value="<%= endDate %>">
    <button type="submit">Update</button>
  </form>
</body>

</html>
 
body {
    font-family: Arial, sans-serif;
    background-color: #f2f2f2;
    color: #333;
    margin: 0;
    padding: 0;
  }
  
  h1, h2 {
    color: #fff;
    background-color: #3366cc;
    padding: 10px;
    margin: 0;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 20px;
  }
  
  th, td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  
  th {
    background-color: #3366cc;
    color: #fff;
  }
  
  tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  
  tr:hover {
    background-color: #e6e6e6;
  }
  
  form {
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }
  
  input[type="datetime-local"] {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
  }
  
  button[type="submit"] {
    background-color: #3366cc;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  button[type="submit"]:hover {
    background-color: #2c5aa3;
  }
 
table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 8px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

th {
  background-color: #f2f2f2;
}

 
<% const fileType=getFileType(user.citizenship_document); %>
            <% if (fileType==='pdf' ) { %>
              <iframe src="/uploads/<%= user.citizenship_document %>" width="500px" height="500px"></iframe>
              <% } else if (fileType==='image' ) { %>
                <img src="/uploads/<%= user.citizenship_document %>" alt="Citizenship Document" width="500px"
                  height="500px">
                <% } else { %>
                  <span>Unknown file type</span>
                  <% } %>
 
 <% const fileType=getFileType(user.citizenship_document); %>
            <% if (fileType==='pdf' ) { %>
              <iframe src="/uploads/<%= user.citizenship_document %>" width="500px" height="500px"></iframe>
              <% } else if (fileType==='image' ) { %>
                <img src="/uploads/<%= user.citizenship_document %>" alt="Citizenship Document" width="500px"
                  height="500px">
                <% } else { %>
                  <span>Unknown file type</span>
                  <% } %>
 
app.get("/admin/dashboard", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  try {
    const userResult = await db.query("SELECT id, first_name, last_name, email, phone_no, address, citizenship_no, citizenship_document FROM voters");
    const users = userResult.rows;

    const voteResult = await db.query("SELECT id, candidate, voter_id, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

    res.render("admin.ejs", { votes, users, endDate: endDate.toISOString(), } getFileType);
  } catch (err) {
    console.error("Error fetching data:", err);
    res.status(500).send("Error fetching data");
  }
});
 
<%= user.citizenship_document %>
 
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #f2f2f2;
    }
  </style>
 
 const voteResult = await db.query("SELECT id, candidate, voter_id, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

 
 <h2>Votes</h2>
  <ul>
    <% votes.forEach(vote => { %>
      <li>
        Candidate: <%= vote.candidate %> | Timestamp: <%= vote.timestamp %>
      </li>
    <% }) %>
  </ul>
 
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
</head>

<body>
  <h1>Admin Dashboard</h1>

  <h2>Voters</h2>
  <ul>
    <% users.forEach(user=> { %>
      <li>
        <%= user.first_name + ' ' + user.last_name %>
        <%= user.email %>
        <%= user.phone_no %>
        <%= user.address %>
        <%= user.citizenship_no %>
        <%= user.citizenship_document %>
          <form action="/admin/delete-user" method="POST" style="display: inline;">
            <input type="hidden" name="userId" value="<%= user.id %>">
            <button type="submit">Delete</button>
          </form>
      </li>
      <% }) %>
  </ul>

  <h2>Votes</h2>
  <ul>
    <% votes.forEach(vote=> { %>
      <li>
        Candidate: <%= vote.candidate %> | Timestamp: <%= vote.timestamp %>
      </li>
      <% }) %>
  </ul>

  <h2>Update End Date</h2>
  <form action="/admin/update-end-date" method="POST">
    <label for="newEndDate">New End Date:</label>
    <input type="datetime-local" id="newEndDate" name="newEndDate" value="<%= endDate %>">
    <button type="submit">Update</button>
  </form>
</body>

</html>
 
<%= user.first_name %>
        <%= user.last_name %>
 
first_name, last_name
 
const userResult = await db.query("SELECT id, email, first_name, last_name FROM voters");
    const users = userResult.rows;
 
<form action="/admin/delete-user" method="POST" style="display: inline;">
                      <input type="hidden" name="userId" value="<%= user.id %>">
                      <button type="submit">Delete</button>
                    </form>
 
 <%= user.first_name %> <%= user.last_name %>
 
app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});
 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
</head>
<body>
  <h1>Admin Dashboard</h1>

  <h2>Votes</h2>
  <ul>
    <% votes.forEach(vote => { %>
      <li>
        Candidate: <%= vote.candidate %> | Timestamp: <%= vote.timestamp %>
        <form action="/admin/delete-vote" method="POST" style="display: inline;">
          <input type="hidden" name="voteId" value="<%= vote.id %>">
          <button type="submit">Delete</button>
        </form>
      </li>
    <% }) %>
  </ul>

  <h2>Update End Date</h2>
  <form action="/admin/update-end-date" method="POST">
    <label for="newEndDate">New End Date:</label>
    <input type="datetime-local" id="newEndDate" name="newEndDate" value="<%= endDate %>">
    <button type="submit">Update</button>
  </form>
</body>
</html>
 
app.get("/admin/dashboard", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  try {
    const voteResult = await db.query("SELECT id, candidate, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

    res.render("admin.ejs", { votes, endDate: endDate.toISOString() });
  } catch (err) {
    console.error("Error fetching vote data:", err);
    res.status(500).send("Error fetching vote data");
  }
});
 
app.post("/register-and-info", upload.single('citizenship_document'), async (req, res) => {
  const { username, password, first_name, last_name, citizenship_no, phone_no, address } = req.body;
  const citizenshipDocument = req.file;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [username]);
    if (checkResult.rows.length > 0) {
      return res.render("register-and-info.ejs", { error: "User already exists. Please login or use a different email." });
    }

    const hashedPassword = await bcrypt.hash(password, saltRounds);

    await db.query("INSERT INTO voters (email, password) VALUES ($1, $2)", [username, hashedPassword]);

    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address, citizenship_document) VALUES ($1, $2, $3, $4, $5, $6, $7)", [username, first_name, last_name, citizenship_no, phone_no, address, citizenshipDocument.filename]);

    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('register-and-info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('register-and-info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      console.error("Error saving registration and additional information:", err);
      const errorMessage = "Error saving registration and additional information. Please try again later.";
      return res.render("register-and-info.ejs", { error: errorMessage });
    }
  }
});
 
  padding-top: 10px;
 
  margin-top: 10px;
 
 </div>
 
 <div class="password-input-wrapper">
 
.email-input,
.password-input {
  width: 300px; /* Adjust the width as needed */
  padding: 8px; /* Adjust the padding as needed */
  /* Add any other styles you want */
}
 
<%- include('partials/header') %>
<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>Register and Provide Additional Information</h1>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Makes POST request to /register-and-info route -->
    <form action="/register-and-info" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()" class="login-form">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="design" id="passwordInput" name="password" required>
          <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Register</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>
 
id="passwordInput"
 
 <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
       
 
 </div>
 
 <div class="password-input-wrapper">
 
 <label for="password">Password</label>
 
 </div>
 
<div class="password-input-wrapper">
 
<%- include('partials/header') %>
<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1 class="sub-container-title">CREATE NEW ACCOUNT</h1>
    <% if (typeof error !== 'undefined' && error) { %>
    <p class="error-message"><%= error %></p>
    <% } %>
    <form action="/save-additional-info" method="post" class="login-form" onsubmit="return validateForm()" enctype="multipart/form-data">
      <div class="form-group">
        <label for="username" class="form-label">Username:</label>
        <input type="text" id="username" class="form-control" name="username" required>
      </div>
      <div class="form-group">
        <label for="first_name" class="form-label">First Name:</label>
        <input type="text" id="first_name" class="form-control" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name" class="form-label">Last Name:</label>
        <input type="text" id="last_name" class="form-control" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no" class="form-label">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="form-control" name="citizenship_no" required>
        <span id="citizenshipNoError" class="error-message"></span>
      </div>
      <div class="form-group">
        <label for="phone_no" class="form-label">Phone no.:</label>
        <input type="tel" id="phone_no" class="form-control" name="phone_no" required maxlength="10">
        <span id="phoneNoError" class="error-message"></span>
      </div>
      <div class="form-group">
        <label for="address" class="form-label">Address:</label>
        <input type="text" id="address" class="form-control" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document" class="form-label">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="form-control" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn btn-submit">Submit</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>

 
<%- include('partials/header') %>
<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>CREATE NEW ACCOUNT</h1>
    <% if (typeof error !== 'undefined' && error) { %>
    <p style="color: red;"><%= error %></p>
    <% } %>
    <form action="/save-additional-info" method="post" class="login-form" onsubmit="return validateForm()" enctype="multipart/form-data">
      <div class="form-group">
        <label for="username" class="form-label">Username:</label>
        <input type="text" id="username" class="form-control" name="username" required>
      </div>
      <div class="form-group">
        <label for="first_name" class="form-label">First Name:</label>
        <input type="text" id="first_name" class="form-control" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name" class="form-label">Last Name:</label>
        <input type="text" id="last_name" class="form-control" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no" class="form-label">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="form-control" name="citizenship_no" required>
        <span id="citizenshipNoError" class="error-message"></span>
      </div>
      <div class="form-group">
        <label for="phone_no" class="form-label">Phone no.:</label>
        <input type="tel" id="phone_no" class="form-control" name="phone_no" required maxlength="10">
        <span id="phoneNoError" class="error-message"></span>
      </div>
      <div class="form-group">
        <label for="address" class="form-label">Address:</label>
        <input type="text" id="address" class="form-control" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document" class="form-label">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="form-control" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn btn-submit">Submit</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>

 
<%- include('partials/header') %>
<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>CREATE NEW ACCOUNT</h1>
    <% if (typeof error !== 'undefined' && error) { %>
    <p style="color: red;"><%= error %></p>
    <% } %>
    <form action="/save-additional-info" method="post" class="login-form" onsubmit="return validateForm()" enctype="multipart/form-data">
      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Submit</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>
 
<%- include('partials/header') %>

<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>Register</h1>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()" class="login-form">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="design" id="passwordInput" name="password" required>
          <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
<%- include('partials/header') %>

<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>Register</h1>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()" class="login-form">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="design" id="passwordInput" name="password" required>
          <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
<%- include('partials/header') %>
<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>Register and Provide Additional Information</h1>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Makes POST request to /register-and-info route -->
    <form action="/register-and-info" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()" class="login-form">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="design" id="passwordInput" name="password" required>
          <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Register</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>
 
<%- include('partials/header') %>
<div class="container">
  <div class="sub-container">
    <h1>Register and Provide Additional Information</h1>
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <!-- Makes POST request to /register-and-info route -->
    <form action="/register-and-info" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()">
      <div>
        <label for="email">Email</label>
        <input type="email" class="form-control" name="username" required>
      </div>
      <div>
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="form-control" id="passwordInput" name="password" required>
          <span class="toggle-password" onclick="togglePasswordVisibility('passwordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <div class="form-group">
        <label for="citizenship_document">Citizenship Document:</label>
        <input type="file" id="citizenship_document" class="design" name="citizenship_document" accept=".pdf" required>
      </div>
      <button type="submit" class="btn">Register</button>
    </form>
  </div>
</div>
<%- include('partials/footer') %>
 
<%- include('partials/header') %>

<h2>Register and Provide Additional Information</h2>

<% if (typeof error !== 'undefined') { %>
  <p><%= error %></p>
<% } %>

<form action="/register-and-info" method="POST" enctype="multipart/form-data">
  <label for="username">Email:</label>
  <input type="email" id="username" name="username" required>

  <label for="password">Password:</label>
  <input type="password" id="password" name="password" required>

  <label for="first_name">First Name:</label>
  <input type="text" id="first_name" name="first_name" required>

  <label for="last_name">Last Name:</label>
  <input type="text" id="last_name" name="last_name" required>

  <label for="citizenship_no">Citizenship No.:</label>
  <input type="text" id="citizenship_no" name="citizenship_no" required>

  <label for="phone_no">Phone No.:</label>
  <input type="text" id="phone_no" name="phone_no" required>

  <label for="address">Address:</label>
  <textarea id="address" name="address" required></textarea>

  <label for="citizenship_document">Citizenship Document:</label>
  <input type="file" id="citizenship_document" name="citizenship_document" required>

  <button type="submit">Register</button>
</form>

<%- include('partials/footer') %>
 
function togglePasswordVisibility(inputId) {
  const passwordInput = document.getElementById(inputId);
  const togglePasswordIcon = passwordInput.nextElementSibling.querySelector('i');

  if (passwordInput.type === 'password') {
    passwordInput.type = 'text';
    togglePasswordIcon.classList.remove('fa-eye');
    togglePasswordIcon.classList.add('fa-eye-slash');
  } else {
    passwordInput.type = 'password';
    togglePasswordIcon.classList.remove('fa-eye-slash');
    togglePasswordIcon.classList.add('fa-eye');
  }
}

function validateForm() {
  var isValidPhoneNumber = validatePhoneNumber();
  return isValidPhoneNumber; // Return the result of phone number validation
}

function validatePhoneNumber() {
  var input = document.getElementById("phone_no").value;
  var errorSpan = document.getElementById("phoneNoError");

  if (/^\d{10}$/.test(input)) {
      errorSpan.textContent = ""; // Clear error message if input is valid
      return true; // Validation successful
  } else {
      errorSpan.textContent = "Please enter exactly 10 digits"; // Show error message
      return false; // Validation failed
  }
}


// Function to update the current date


function updateCurrentDate() {
  // Create a new Date object
  var currentDate = new Date();

  // Get the date, month, and year
  var day = currentDate.getDate();
  var month = currentDate.getMonth() + 1; // Months are zero-indexed, so we add 1
  var year = currentDate.getFullYear();

  // Format the date as desired (e.g., DD/MM/YYYY)
  var formattedDate = day + '/' + month + '/' + year;

  // Update the content of the element with ID 'currentDate'
  document.getElementById('currentDate').textContent = 'Current Date: ' + formattedDate;
}

// Call the function to update the current date when the page loads
window.onload = function() {
  updateCurrentDate();
};


const endDateInput = document.getElementById('endDateInput').value;
// Create a new Date object from the endDateInput value
const endDate = new Date(endDateInput);

// Function to disable the voting form
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}

// Function to update the timer
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    // Enable voting form
    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}

// Update timer every second
setInterval(updateTimer, 1000);
// Initial call to update timer
updateTimer();




//admin js
document.addEventListener('DOMContentLoaded', () => {
  const verifyUsersBtn = document.getElementById('verifyUsersBtn');
  const setEndDateBtn = document.getElementById('setEndDateBtn');
  const countdownElement = document.getElementById('countdown');

  // Implement the logic for verifying users
  verifyUsersBtn.addEventListener('click', () => {
    // Your code to verify users goes here
    console.log('Verify Users button clicked');
  });

  // Implement the logic for setting the end date
  setEndDateBtn.addEventListener('click', () => {
    // Your code to set the end date goes here
    console.log('Set End Date button clicked');
  });

  // Implement the countdown logic
  const endDate = new Date('<%= endDate %>');
  updateCountdown(endDate);
  setInterval(() => updateCountdown(endDate), 1000);

  function updateCountdown(endDate) {
    const now = new Date();
    const diff = endDate.getTime() - now.getTime();
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff / (1000 * 60)) % 60);
    const seconds = Math.floor((diff / 1000) % 60);
    countdownElement.textContent = `${padZero(hours)}:${padZero(minutes)}:${padZero(seconds)}`;
  }

  function padZero(value) {
    return value.toString().padStart(2, '0');
  }
});
 
import express from "express";
import bodyParser from "body-parser";
import pg from "pg";
import bcrypt from "bcrypt";
import passport from "passport";
import { Strategy } from "passport-local";
import session from "express-session";
import env from "dotenv";
import multer from 'multer';
import path from 'path';



const app = express();
const port = 3000;
const saltRounds = 10;
env.config();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);


app.use(passport.initialize());
app.use(passport.session());

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the directory where you want to store the uploaded files
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}_${file.originalname}`); // Construct a unique filename for the uploaded file
  }
});

const upload = multer({ storage: storage });

let endDate = new Date('2024-03-27T12:00:00');

const db = new pg.Client({
  user:process.env.User_name,
  host:process.env.Host_name,
  database:process.env.DB_name,
  password:process.env.Password,
  port:process.env.Port,
});

db.connect();

app.get("/", (req, res) => {
  res.render("home.ejs");
});


app.get("/admin-login",(req,res)=>{
  res.render("admin-login.ejs");
});

app.get("/login", (req, res) => {
  res.render("login.ejs", { error: null });
});

app.get("/register", (req, res) => {
  res.render("register.ejs");
});

app.get("/logout", (req, res) => {
  req.logout(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});



app.get("/voting", (req, res) => {
  if (req.isAuthenticated()) {
    const endDateISOString = endDate.toISOString();
    res.render('voting.ejs', { endDate: endDateISOString });
  } else {
    res.redirect("/login");
  }
});


app.get("/addtional-info",(req,res)=>{
  res.render("additional_info.ejs");
})

app.get("/admin/dashboard", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  try {
    // Fetch vote data from the database
    const voteResult = await db.query("SELECT id, candidate, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

    res.render("admin.ejs", { votes, endDate: endDate.toISOString() });
  } catch (err) {
    console.error("Error fetching vote data:", err);
    res.status(500).send("Error fetching vote data");
  }
});


app.post('/admin-login', (req, res, next) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM admins WHERE username = $1', [username])
    .then(result => {
      if (result.rows.length === 0) {
        // No admin found with the provided username
        return res.render('admin-login.ejs', { error: 'Invalid username or password' });
      }

      const admin = result.rows[0];
      bcrypt.compare(password, admin.password, (err, isMatch) => {
        if (err) {
          return next(err);
        }
        if (!isMatch) {
          // Incorrect password
          return res.render('admin-login.ejs', { error: 'Invalid username or password' });
        }

        // Admin authentication successful
        req.session.isAdmin = true;
        return res.redirect('/admin/dashboard');
      });
    })
    .catch(err => {
      console.error(err);
      return res.render('admin-login.ejs', { error: 'An error occurred' });
    });
});

app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Delete the user from the database
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});

app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});

app.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.render("login.ejs", { error: "Invalid email or password" });
    }
    req.login(user, (err) => {
      if (err) {
        return next(err);
      }
      return res.redirect("/voting");
    });
  })(req, res, next);
});

passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            //Error with password check
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              //Passed password check
              return cb(null, user);
            } else {
              //Did not pass password check
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

passport.serializeUser((user, cb) => {
  cb(null, user);
});
passport.deserializeUser((user, cb) => {
  cb(null, user);
});



app.post("/save-additional-info", upload.single('citizenship_document'), async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;
  const citizenshipDocument = req.file;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address, citizenship_document) VALUES ($1, $2, $3, $4, $5, $6, $7)", [username, first_name, last_name, citizenship_no, phone_no, address, citizenshipDocument.filename]);

    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('additional_info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      return res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});


function isVotingAllowed() {
  const currentTime = new Date();
  return currentTime <= endDate;
}

app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if voting is allowed
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});


app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

 
import express from "express";
import bodyParser from "body-parser";
import pg from "pg";
import bcrypt from "bcrypt";
import passport from "passport";
import { Strategy } from "passport-local";
import session from "express-session";
import env from "dotenv";
import multer from 'multer';
import path from 'path';



const app = express();
const port = 3000;
const saltRounds = 10;
env.config();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);


app.use(passport.initialize());
app.use(passport.session());

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the directory where you want to store the uploaded files
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}_${file.originalname}`); // Construct a unique filename for the uploaded file
  }
});

const upload = multer({ storage: storage });

let endDate = new Date('2024-03-27T12:00:00');

const db = new pg.Client({
  user:process.env.User_name,
  host:process.env.Host_name,
  database:process.env.DB_name,
  password:process.env.Password,
  port:process.env.Port,
});

db.connect();

app.get("/", (req, res) => {
  res.render("home.ejs");
});


app.get("/admin-login",(req,res)=>{
  res.render("admin-login.ejs");
});

app.get("/login", (req, res) => {
  res.render("login.ejs", { error: null });
});

app.get("/register", (req, res) => {
  res.render("register.ejs");
});

app.get("/logout", (req, res) => {
  req.logout(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});



app.get("/voting", (req, res) => {
  if (req.isAuthenticated()) {
    const endDateISOString = endDate.toISOString();
    res.render('voting.ejs', { endDate: endDateISOString });
  } else {
    res.redirect("/login");
  }
});


app.get("/addtional-info",(req,res)=>{
  res.render("additional_info.ejs");
})

app.get("/admin/dashboard", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  try {
    // Fetch vote data from the database
    const voteResult = await db.query("SELECT id, candidate, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

    res.render("admin.ejs", { votes, endDate: endDate.toISOString() });
  } catch (err) {
    console.error("Error fetching vote data:", err);
    res.status(500).send("Error fetching vote data");
  }
});


app.post('/admin-login', (req, res, next) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM admins WHERE username = $1', [username])
    .then(result => {
      if (result.rows.length === 0) {
        // No admin found with the provided username
        return res.render('admin-login.ejs', { error: 'Invalid username or password' });
      }

      const admin = result.rows[0];
      bcrypt.compare(password, admin.password, (err, isMatch) => {
        if (err) {
          return next(err);
        }
        if (!isMatch) {
          // Incorrect password
          return res.render('admin-login.ejs', { error: 'Invalid username or password' });
        }

        // Admin authentication successful
        req.session.isAdmin = true;
        return res.redirect('/admin/dashboard');
      });
    })
    .catch(err => {
      console.error(err);
      return res.render('admin-login.ejs', { error: 'An error occurred' });
    });
});

app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Delete the user from the database
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});

app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});

app.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.render("login.ejs", { error: "Invalid email or password" });
    }
    req.login(user, (err) => {
      if (err) {
        return next(err);
      }
      return res.redirect("/voting");
    });
  })(req, res, next);
});

passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            //Error with password check
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              //Passed password check
              return cb(null, user);
            } else {
              //Did not pass password check
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

passport.serializeUser((user, cb) => {
  cb(null, user);
});
passport.deserializeUser((user, cb) => {
  cb(null, user);
});



app.post("/save-additional-info", upload.single('citizenship_document'), async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;
  const citizenshipDocument = req.file;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address, citizenship_document) VALUES ($1, $2, $3, $4, $5, $6, $7)", [username, first_name, last_name, citizenship_no, phone_no, address, citizenshipDocument.filename]);

    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('additional_info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      return res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});


function isVotingAllowed() {
  const currentTime = new Date();
  return currentTime <= endDate;
}

app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if voting is allowed
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});


app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

 
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'uploads/'); // Specify the directory where you want to store the uploaded files
  },
  filename: function (req, file, cb) {
    cb(null, `${Date.now()}_${file.originalname}`); // Construct a unique filename for the uploaded file
  }
});

const upload = multer({ storage: storage });
 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);

    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('additional_info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      return res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});
 
<%- include('partials/header') %>

<div class="container">
  <div id="info_container" class="sub-container second_class">
    <h1>CREATE NEW ACCOUNT</h1>
    <% if (typeof error !== 'undefined' && error) { %>
      <p style="color: red;"><%= error %></p>
    <% } %>
    <form action="/save-additional-info" method="post" class="login-form" onsubmit="return validateForm()" >
      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" class="design" name="username" required>
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name" required>
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name" required>
      </div>
      <div class="form-group">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no" required>
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" required maxlength="10">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address" required>
      </div>
      <button type="submit" class="btn">Submit</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
import express from "express";
import bodyParser from "body-parser";
import pg from "pg";
import bcrypt from "bcrypt";
import passport from "passport";
import { Strategy } from "passport-local";
import session from "express-session";
import env from "dotenv";

const app = express();
const port = 3000;
const saltRounds = 10;
env.config();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);



app.use(passport.initialize());
app.use(passport.session());

let endDate = new Date('2024-03-27T12:00:00');

const db = new pg.Client({
  user:process.env.User_name,
  host:process.env.Host_name,
  database:process.env.DB_name,
  password:process.env.Password,
  port:process.env.Port,
});

db.connect();

app.get("/", (req, res) => {
  res.render("home.ejs");
});


app.get("/admin-login",(req,res)=>{
  res.render("admin-login.ejs");
});

app.get("/login", (req, res) => {
  res.render("login.ejs", { error: null });
});

app.get("/register", (req, res) => {
  res.render("register.ejs");
});

app.get("/logout", (req, res) => {
  req.logout(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});



app.get("/voting", (req, res) => {
  if (req.isAuthenticated()) {
    const endDateISOString = endDate.toISOString();
    res.render('voting.ejs', { endDate: endDateISOString });
  } else {
    res.redirect("/login");
  }
});


app.get("/addtional-info",(req,res)=>{
  res.render("additional_info.ejs");
})

app.get("/admin/dashboard", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  try {
    // Fetch vote data from the database
    const voteResult = await db.query("SELECT id, candidate, created_at AS timestamp FROM votes");
    const votes = voteResult.rows;

    res.render("admin.ejs", { votes, endDate: endDate.toISOString() });
  } catch (err) {
    console.error("Error fetching vote data:", err);
    res.status(500).send("Error fetching vote data");
  }
});


app.post('/admin-login', (req, res, next) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM admins WHERE username = $1', [username])
    .then(result => {
      if (result.rows.length === 0) {
        // No admin found with the provided username
        return res.render('admin-login.ejs', { error: 'Invalid username or password' });
      }

      const admin = result.rows[0];
      bcrypt.compare(password, admin.password, (err, isMatch) => {
        if (err) {
          return next(err);
        }
        if (!isMatch) {
          // Incorrect password
          return res.render('admin-login.ejs', { error: 'Invalid username or password' });
        }

        // Admin authentication successful
        req.session.isAdmin = true;
        return res.redirect('/admin/dashboard');
      });
    })
    .catch(err => {
      console.error(err);
      return res.render('admin-login.ejs', { error: 'An error occurred' });
    });
});

app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Delete the user from the database
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});

app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});

app.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.render("login.ejs", { error: "Invalid email or password" });
    }
    req.login(user, (err) => {
      if (err) {
        return next(err);
      }
      return res.redirect("/voting");
    });
  })(req, res, next);
});

passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            //Error with password check
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              //Passed password check
              return cb(null, user);
            } else {
              //Did not pass password check
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

passport.serializeUser((user, cb) => {
  cb(null, user);
});
passport.deserializeUser((user, cb) => {
  cb(null, user);
});



app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);

    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('additional_info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      return res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});


function isVotingAllowed() {
  const currentTime = new Date();
  return currentTime <= endDate;
}

app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if voting is allowed
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});


app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

 
app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});
 
app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Delete the user from the database
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});

 
app.get("/admin/dashboard", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect("/admin-login");
  }

  // Render the admin dashboard view
  res.render("admin.ejs", { endDate: endDate.toISOString() });
});
 
.container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .admin-actions {
    display: flex;
    justify-content: flex-start;
    margin-bottom: 20px;
  }
  
  .admin-actions button {
    margin-right: 10px;
  }
  
  .voting-section {
    border: 1px solid #ccc;
    padding: 20px;
  }
  
  .alert {
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .alert-success {
    background-color: #d4edda;
    color: #155724;
  }
  
  .alert-danger {
    background-color: #f8d7da;
    color: #721c24;
  }
  
  .candidate-list {
    list-style-type: none;
    padding: 0;
  }
  
  .candidate-list li {
    margin-bottom: 5px;
  }
  
  .time-remaining {
    margin-top: 20px;
    font-size: 18px;
    font-weight: bold;
  }
 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/admin-dashboard.css" />
  </head>
  <body>
  

    <!-- Modal for setting end date -->
    <div class="modal fade" id="endDateModal" tabindex="-1" role="dialog" aria-labelledby="endDateModalLabel" aria-hidden="true">
      <h1>Admin Dashboard</h1>
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="endDateModalLabel">Set End Date</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="endDateForm">
              <div class="form-group">
                <label for="newEndDate">New End Date:</label>
                <input type="datetime-local" class="form-control" id="newEndDate" name="newEndDate" required />
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" id="updateEndDateBtn">Update</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // ... (existing JavaScript code)

      // Event listener for updating end date
      document.getElementById("updateEndDateBtn").addEventListener("click", () => {
        const newEndDate = document.getElementById("newEndDate").value;
        fetch("/admin/update-end-date", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ newEndDate }),
        })
          .then((response) => {
            if (response.ok) {
              alert("End date updated successfully");
              // Optionally, you can reload the page or update the displayed end date
            } else {
              alert("Error updating end date");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Error updating end date");
          });
      });

      // Event listener for verifying users
      document.getElementById("verifyUsersBtn").addEventListener("click", () => {
        // Code for verifying users
      });

      // Event listener for deleting a user
      const deleteUserButtons = document.querySelectorAll(".delete-user-btn");
      deleteUserButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const userId = button.dataset.userId;
          fetch("/admin/delete-user", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ userId }),
          })
            .then((response) => {
              if (response.ok) {
                alert("User deleted successfully");
                // Optionally, you can reload the page or remove the user from the UI
              } else {
                alert("Error deleting user");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              alert("Error deleting user");
            });
        });
      });
    </script>
  </body>
</html>
 
  <div class="container">
      <h1>Admin Dashboard</h1>
      <div class="admin-actions">
        <h2>Admin Actions</h2>
        <button class="btn btn-primary" id="verifyUsersBtn">Verify Users</button>
        <button class="btn btn-primary" id="setEndDateBtn" data-toggle="modal" data-target="#endDateModal">Set End Date</button>
      </div>
      <div class="voting-section">
        <h2>Voting Information</h2>
        <p class="alert">Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the allotted time expires.</p>
        <!-- Display success or error messages -->
        <ul class="candidate-list">
          <li>Balen Shah</li>
          <li>Harka Sampang</li>
          <li>Rajesh Man Singh</li>
          <li>Dhana Raj Acharya</li>
        </ul>
        <div class="timebox">
          <div class="time_msg">Time Remaining:</div>
          <div class="timer">
            <p class="timing"><%= endDate %></p>
          </div>
        </div>
      </div>
    </div>
 
let endDate = new Date('2024-03-27T12:00:00');
 
let endDate = new Date('2024-03-27T12:00:00');
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/admin-dashboard.css">
</head>
<body>
    <div class="container">
        <h1>Admin Dashboard</h1>
      
        <div class="admin-actions">
          <h2>Admin Actions</h2>
          <button class="btn btn-primary" id="verifyUsersBtn">Verify Users</button>
          <button class="btn btn-primary" id="setEndDateBtn">Set End Date</button>
        </div>
      
        <div class="voting-section">
          <h2>Voting Information</h2>
          <p class="alert">Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the allotted time expires.</p>
      
          <% if (typeof success !== 'undefined' && success) { %>
            <div class="alert alert-success"><%= success %></div>
          <% } else if (typeof error !== 'undefined' && error) { %>
            <div class="alert alert-danger"><%= error %></div>
          <% } %>
      
          <ul class="candidate-list">
            <li>Balen Shah</li>
            <li>Harka Sampang</li>
            <li>Rajesh Man Singh</li>
            <li>Dhana Raj Acharya</li>
          </ul>
      
          <div class="timebox">
              <div class="time_msg">Time Remaining:</div>
              <div class="timer">
                  <p class="timing">00:00:00</p>
              </div>
          </div>
        </div>
      </div>
      
</body>
</html>
 
app.post("/admin/delete-user", async (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const userId = req.body.userId;

  try {
    // Delete the user from the database
    await db.query("DELETE FROM voters WHERE id = $1", [userId]);
    res.status(200).send("User deleted successfully");
  } catch (err) {
    console.error("Error deleting user:", err);
    res.status(500).send("Error deleting user");
  }
});

app.post("/admin/update-end-date", (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.status(403).send("Forbidden");
  }

  const newEndDate = req.body.newEndDate;

  try {
    endDate = new Date(newEndDate);
    res.status(200).send("End date updated successfully");
  } catch (err) {
    console.error("Error updating end date:", err);
    res.status(500).send("Error updating end date");
  }
});

 
app.get('/admin/dashboard', (req, res, next) => {
  if (!req.session.isAdmin) {
    return res.redirect('/admin-login');
  }

  // Render the admin dashboard view
  res.render('admin.ejs');
});
 
let endDate = new Date('2024-03-27T12:00:00');

 
const endDate = new Date('2024-03-27T12:00:00');

 
app.post('/admin-login', (req, res, next) => {
  const { username, password } = req.body;

  db.query('SELECT * FROM admins WHERE username = $1', [username])
    .then(result => {
      if (result.rows.length === 0) {
        return res.render('admin-login.ejs', { error: 'Invalid username or password' });
      }

      const admin = result.rows[0];
      bcrypt.compare(password, admin.password, (err, isMatch) => {
        if (err) {
          return next(err);
        }
        if (!isMatch) {
          return res.render('admin-login.ejs', { error: 'Invalid username or password' });
        }

        // Admin authentication successful
        req.session.isAdmin = true;
        return res.redirect('/admin/dashboard');
      });
    })
    .catch(err => {
      console.error(err);
      return res.render('admin-login.ejs', { error: 'An error occurred' });
    });
});
 
app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});
 
passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            //Error with password check
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              //Passed password check
              return cb(null, user);
            } else {
              //Did not pass password check
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

passport.serializeUser((user, cb) => {
  cb(null, user);
});
passport.deserializeUser((user, cb) => {
  cb(null, user);
});
 
<%- include('partials/header') %>



<script src="/js/admin-dashboard.js"></script>
<%- include('partials/footer') %>
 
<div class="container">
  <h1>Admin Dashboard</h1>

  <div class="admin-actions">
    <h2>Admin Actions</h2>
    <button class="btn btn-primary" id="verifyUsersBtn">Verify Users</button>
    <button class="btn btn-primary" id="setEndDateBtn">Set End Date</button>
  </div>

  <div class="voting-section">
    <h2>Voting Information</h2>
    <p class="alert">Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the allotted time expires.</p>

    <% if (typeof success !== 'undefined' && success) { %>
      <div class="alert alert-success"><%= success %></div>
    <% } else if (typeof error !== 'undefined' && error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>

    <ul class="candidate-list">
      <li>Balen Shah</li>
      <li>Harka Sampang</li>
      <li>Rajesh Man Singh</li>
      <li>Dhana Raj Acharya</li>
    </ul>

    <div class="timebox">
        <div class="time_msg">Time Remaining:</div>
        <div class="timer">
            <p class="timing">00:00:00</p>
        </div>
    </div>
  </div>
</div>

 
<link rel="stylesheet" href="/css/admin-dashboard.css">
 
<div class="time-remaining">
      <h3>Time Remaining:</h3>
      <span id="countdown">00:00:00</span>
    </div>
 
<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8">
  <title>Online Voting System</title>
  <link rel="stylesheet" href="/style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>

<body>
 
<script src="/index.js"></script>
</body>
</html>
 

<%- include('partials/footer') %>
 
<%- include('partials/header') %>
 
<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8">
  <title>Online Voting System</title>
  <link rel="stylesheet" href="/style.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

</head>

<body>
 
user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.Password,
  port: process.env.DB_PORT,
 
process.env.DB_PASSWORD
 
const db = new pg.Client({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

db.connect();
 
import 'dotenv/config';
 

app.get('/setup-admin', async (req, res) => {
  try {
    const username = 'Admin'; // Set the desired username
    const password = port.process.env.Admin_Password; // Set the desired password

    // Hash the password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Insert the admin user into the database
    await db.query('INSERT INTO admins (username, password) VALUES ($1, $2)', [username, hashedPassword]);

    res.send('Admin user created successfully');
  } catch (err) {
    console.error('Error creating admin user:', err);
    res.status(500).send('Error creating admin user');
  }
});
 
app.get('/setup-admin', async (req, res) => {
  try {
    const username = 'admin'; // Set the desired username
    const password = 'admin123'; // Set the desired password

    // Hash the password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Insert the admin user into the database
    await db.query('INSERT INTO admins (username, password) VALUES ($1, $2)', [username, hashedPassword]);

    res.send('Admin user created successfully');
  } catch (err) {
    console.error('Error creating admin user:', err);
    res.status(500).send('Error creating admin user');
  }
});
 
<% if (error) { %>
        <div class="alert alert-danger">
          <%= error %>
        </div>
        <% } %>
 
<a class="nav main login" href="/admin-login" role="button">Login As Admin</a>
 
app.get("/admin-login",(req,res)=>{
  res.render("admin-login.ejs")
})
 
let hasVoted = false; // Add a flag to track if the user has voted

function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}

function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;

  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');

    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      // Disable the voting form only if the user has voted
      voteForm.disabled = hasVoted;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}

// Update timer every second
setInterval(updateTimer, 1000);

// Initial call to update timer
updateTimer();

// Function to handle form submission
function handleFormSubmission(event) {
  event.preventDefault(); // Prevent the default form submission

  // Your existing code for voting goes here
  // ...

  hasVoted = true; // Set the flag to true after the user has voted
}

// Get the form element and add an event listener
const voteForm = document.getElementById('voteForm');
voteForm.addEventListener('submit', handleFormSubmission);
 

// Function to disable the voting form
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}

// Function to update the timer
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    // Enable voting form
    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}

// Update timer every second
setInterval(updateTimer, 1000);
// Initial call to update timer
updateTimer();
 
// Function to disable the voting form
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}

// Function to update the timer
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;

    // Enable voting form
    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = false;
    }
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}

// Update timer every second
setInterval(updateTimer, 1000);
// Initial call to update timer
updateTimer();
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
    voteForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form submission
      alert('Voting has ended. You cannot cast your vote anymore.');
    });
  }
}
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
    voteForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form submission
      alert('Voting has ended. You cannot cast your vote anymore.');
    });
  }
}
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}
 
app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if voting is allowed
    if (!isVotingAllowed()) {
      return res.render('voting.ejs', { error: 'Voting has ended. You cannot cast your vote anymore.', success: '' });
    }

    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    disableVoting(); // Call the disableVoting function when time expires
  }
}
 
const endDateInput = document.getElementById('endDateInput').value;

// Create a new Date object from the endDateInput value
const endDate = new Date(endDateInput);

// Function to disable the voting form
function disableVoting() {
  const voteForm = document.querySelector('form.background');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
    voteForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form submission
      alert('Voting has ended. You cannot cast your vote anymore.');
    });
  }
}

let votingEnded = false;

// Function to update the timer
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;

  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    if (!votingEnded) {
      votingEnded = true;
      const voteForm = document.getElementById('voteForm');
      if (voteForm) {
        voteForm.disabled = true; // Disable the voting form
        voteForm.addEventListener('submit', (event) => {
          event.preventDefault(); // Prevent form submission
          alert('Voting has ended. You cannot cast your vote anymore.');
        });
      }
    }
  }
}

// Update timer every second
setInterval(updateTimer, 1000);

// Initial call to update timer
updateTimer();
 
let votingEnded = false;

// Function to update the timer
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
    const voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = true; // Disable the voting form
      voteForm.addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent form submission
        alert('Voting has ended. You cannot cast your vote anymore.');
      });
    }
  }
}

// Update timer every second
setInterval(updateTimer, 1000);

// Initial call to update timer
updateTimer();
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;
  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);
    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');
    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    if (!votingEnded) {
      votingEnded = true;
      disableVoting();
    }
  }
}
 
function updateTimer() {
  const now = new Date();
  const timeDifference = endDate - now;

  if (timeDifference > 0) {
    const hours = Math.floor(timeDifference / (1000 * 60 * 60));
    const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

    const formattedHours = hours.toString().padStart(2, '0');
    const formattedMinutes = minutes.toString().padStart(2, '0');
    const formattedSeconds = seconds.toString().padStart(2, '0');

    document.querySelector('.timing').textContent = `${formattedHours}:${formattedMinutes}:${formattedSeconds}`;
  } else {
    document.querySelector('.timing').textContent = 'Voting Closed';
  }
}
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
    voteForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form submission
      alert('Voting has ended. You cannot cast your vote anymore.');
    });
  }
}
 
disableVoting();
 
const isVotingAllowedNow = isVotingAllowed();
 
function disableVoting(isVotingAllowed) {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    if (!isVotingAllowed) {
      voteForm.disabled = true; // Disable the voting form
      document.querySelector('.timing').textContent = 'Voting Closed';
      voteForm.addEventListener('submit', (event) => {
        event.preventDefault(); // Prevent form submission
        alert('Voting has ended. You cannot cast your vote anymore.');
      });
    } else {
      voteForm.disabled = true; // Disable the voting form for the user who has already voted
    }
  }
}
 
document.querySelector('.timing').textContent = 'Voting Closed';
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
    voteForm.addEventListener('submit', (event) => {
      event.preventDefault(); // Prevent form submission
      alert('Voting has ended. You cannot cast your vote anymore.');
    });
  }
}
 

app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}
 
function disableVoting() {
  const voteForm = document.getElementById('voteForm');
  if (voteForm) {
    voteForm.disabled = true; // Disable the voting form
  }
}
 
import express from "express";
import bodyParser from "body-parser";
import pg from "pg";
import bcrypt from "bcrypt";
import passport from "passport";
import { Strategy } from "passport-local";
import session from "express-session";
import env from "dotenv";

const app = express();
const port = 3000;
const saltRounds = 10;
env.config();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));

app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: true,
  })
);

app.use(passport.initialize());
app.use(passport.session());

const db = new pg.Client({
  user:process.env.User_name,
  host:process.env.Host_name,
  database:process.env.DB_name,
  password:process.env.Password,
  port:process.env.Port,
});

db.connect();

app.get("/", (req, res) => {
  res.render("home.ejs");
});

app.get("/login", (req, res) => {
  res.render("login.ejs", { error: null });
});

app.get("/register", (req, res) => {
  res.render("register.ejs");
});

app.get("/logout", (req, res) => {
  req.logout(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});

const endDate = new Date('2024-03-25T12:00:00');


app.get("/voting", (req, res) => {
  if (req.isAuthenticated()) {
    const endDateISOString = endDate.toISOString();
    res.render('voting.ejs', { endDate: endDateISOString });
  } else {
    res.redirect("/login");
  }
});


app.get("/addtional-info",(req,res)=>{
  res.render("additional_info.ejs");
})

app.post("/login", (req, res, next) => {
  passport.authenticate("local", (err, user, info) => {
    if (err) {
      return next(err);
    }
    if (!user) {
      return res.render("login.ejs", { error: "Invalid email or password" });
    }
    req.login(user, (err) => {
      if (err) {
        return next(err);
      }
      return res.redirect("/voting");
    });
  })(req, res, next);
});

app.post("/register", async (req, res) => {
  const email = req.body.username;
  const password = req.body.password;

  try {
    const checkResult = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);

      if (checkResult.rows.length > 0) {
        // User already exists, render the register page with an error message
        res.render("register.ejs", { error: "User already exists. Please login or use a different email." });
    } else {
      //hashing the password and saving it in the database
      bcrypt.hash(password, saltRounds, async (err, hash) => {
        if (err) {
          console.error("Error hashing password:", err);
        } else {
          const result=await db.query(
            "INSERT INTO voters (email, password) VALUES ($1, $2) RETURNING *",
            [email, hash]
          );
           const voters=result.rows[0];
           req.login(voters,(err)=>{
            res.redirect("/addtional-info");
           })
        }
      });
    }
  } catch (err) {
    console.log(err);
  }
});

app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);

    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      if (err.constraint === 'users_citizenship_no_key') {
        return res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }
      if (err.constraint === 'users_phone_no_key') {
        return res.render('additional_info.ejs', { error: 'Phone number already exists' });
      }
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      return res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});


app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});





passport.use(
  new Strategy(async function verify(username, password, cb) {
    try {
      const result = await db.query("SELECT * FROM voters WHERE email = $1 ", [
        username,
      ]);
      if (result.rows.length > 0) {
        const user = result.rows[0];
        const storedHashedPassword = user.password;
        bcrypt.compare(password, storedHashedPassword, (err, valid) => {
          if (err) {
            //Error with password check
            console.error("Error comparing passwords:", err);
            return cb(err);
          } else {
            if (valid) {
              //Passed password check
              return cb(null, user);
            } else {
              //Did not pass password check
              return cb(null, false);
            }
          }
        });
      } else {
        return cb("User not found");
      }
    } catch (err) {
      console.log(err);
    }
  })
);

passport.serializeUser((user, cb) => {
  cb(null, user);
});
passport.deserializeUser((user, cb) => {
  cb(null, user);
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
 
// Set the end date for the voting period
   const endDateInput = document.getElementById('endDateInput').value;
   const endDate = new Date(endDateString);

   function disableVoting() {
    var voteForm = document.getElementById('voteForm');
    if (voteForm) {
      voteForm.disabled = true; // Disable the voting form
    }
  }

   // Function to update the timer
   function updateTimer() {
    var now = new Date();
    var timeDifference = endDate - now;

    console.log("Now:", now);
    console.log("End Date:", endDate);
    console.log("Time Difference (milliseconds):", timeDifference);

    if (timeDifference > 0) {
        var hours = Math.floor(timeDifference / (1000 * 60 * 60));
        var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

        hours = (hours < 10) ? "0" + hours : hours;
        minutes = (minutes < 10) ? "0" + minutes : minutes;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        document.querySelector('.timing').textContent = hours + ":" + minutes + ":" + seconds;
    } else {
        document.querySelector('.timing').textContent = "Voting Closed";
        disableVoting();
    }
}

   // Update timer every second
   setInterval(updateTimer, 1000);

   // Initial call to update timer
   updateTimer();
 
 const endDateString = '{{ endDate }}'; // This will be replaced with the actual value
 
<input type="hidden" id="endDateInput" value="<%= locals.endDate %>">
 
        <input type="hidden" id="endDateInput" value="<%= endDate %>">
 
   <input type="hidden" id="endDateInput" value="<%= JSON.stringify(endDate %>">
 
app.get("/voting", (req, res) => {
  if (req.isAuthenticated()) {
    res.render('voting.ejs', { endDate: endDate.toISOString() });
  } else {
    res.redirect("/login");
  }
});
 
app.get("/voting", (req, res) => {
  // console.log(req.user);
  if (req.isAuthenticated()) {
    res.render('voting.ejs', { endDate: endDate.toISOString() });
  } else {
    res.redirect("/login");
  }
});
 
 <input type="hidden" id="endDateInput" value="<%= endDate %>">
 
  var endDate = new Date('2024-03-24T12:00:00'); // Example end date and time
 
<%= endDate %>
 
<span id="endDate"></span>
 
function updateCurrentDate() {
  // Create a new Date object
  var currentDate = new Date();

  // Get the date, month, and year
  var day = currentDate.getDate();
  var month = currentDate.getMonth() + 1; // Months are zero-indexed, so we add 1
  var year = currentDate.getFullYear();

  // Format the date as desired (e.g., DD/MM/YYYY)
  var formattedDate = day + '/' + month + '/' + year;

  // Update the content of the element with ID 'currentDate'
  document.getElementById('currentDate').textContent = 'Current Date: ' + formattedDate;
}

// Call the function to update the current date when the page loads
window.onload = function() {
  updateCurrentDate();
};

   // Set the end date for the voting period
   var endDate = new Date('2024-03-23T12:00:00'); // Example end date and time

   // Function to update the timer
   function updateTimer() {
    var now = new Date();
    var timeDifference = endDate - now;

    console.log("Now:", now);
    console.log("End Date:", endDate);
    console.log("Time Difference (milliseconds):", timeDifference);

    if (timeDifference > 0) {
        var hours = Math.floor(timeDifference / (1000 * 60 * 60));
        var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

        hours = (hours < 10) ? "0" + hours : hours;
        minutes = (minutes < 10) ? "0" + minutes : minutes;
        seconds = (seconds < 10) ? "0" + seconds : seconds;

        document.querySelector('.timing').textContent = hours + ":" + minutes + ":" + seconds;
    } else {
        document.querySelector('.timing').textContent = "Voting Closed";
    }
}
 
   function updateTimer() {
       var now = new Date();
       var timeDifference = endDate - now;

       if (timeDifference > 0) {
           var hours = Math.floor(timeDifference / (1000 * 60 * 60));
           var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
           var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

           hours = (hours < 10) ? "0" + hours : hours;
           minutes = (minutes < 10) ? "0" + minutes : minutes;
           seconds = (seconds < 10) ? "0" + seconds : seconds;

           document.querySelector('.timing').textContent = hours + ":" + minutes + ":" + seconds;
       } else {
           document.querySelector('.timing').textContent = "Voting Closed";
       }
   }

 
  <span id="endDate"></span>
 
2024-03-22T12:00:00
 
// Function to update timer
 function updateTimer() {
  const currentDate = new Date();
  const endDate = new Date(document.getElementById('endDate').textContent);
  const timeDiff = endDate - currentDate;

  // Calculate remaining time
  let seconds = Math.floor((timeDiff / 1000) % 60);
  let minutes = Math.floor((timeDiff / 1000 / 60) % 60);
  let hours = Math.floor((timeDiff / (1000 * 60 * 60)) % 24);
  
  // Pad single digit numbers with leading zeros
  seconds = seconds < 10 ? '0' + seconds : seconds;
  minutes = minutes < 10 ? '0' + minutes : minutes;
  hours = hours < 10 ? '0' + hours : hours;

  // Update timer display
  document.getElementById('timer').textContent = hours + ":" + minutes + ":" + seconds;

  // If time remaining is less than 0, stop the timer
  if (timeDiff <= 0) {
      clearInterval(timerInterval);
      document.getElementById('timer').textContent = "Time's up!";
  }
}

// Call updateTimer function every second
const timerInterval = setInterval(updateTimer, 1000);

// Call updateTimer function once immediately to avoid initial delay
updateTimer();


 
   <script>
        
    </script>
 
block
 
</p>
 
 <div class="timebox">
                <p class="time_msg">voting time ends in</p>
                <div class="timer">  <div>
                     <span id="timer"></span>
                  </div>
                
                  </div>
 
<p class="time_msg">voting time ends in</p>
 
/for voting time
   

    function updateTimer() {
      const currentTime = new Date().getTime();
      const timeRemaining = votingEndTime - currentTime;

   
 
   if (timeRemaining > 0) {
        const hours = Math.floor(timeRemaining / (1000 * 60 * 60));
        const minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);
        document.getElementById('timer').textContent = `${hours}h ${minutes}m ${seconds}s`;
      } else {
        document.getElementById('timer').textContent = 'Voting has ended';
        clearInterval(timerInterval);
      }
    }

    const timerInterval = setInterval(updateTimer, 1000);
 
<div>
 
  </div>
 
{ votingEndTime: votingEndTime.getTime() })
 
  // console.log(req.user);
  if (req.isAuthenticated()) {
    res.render('voting.ejs', { votingEndTime: votingEndTime.getTime() });
  } else {
    res.redirect("/login");
  }
});
 
<% const votingEndTime = new Date('2024-03-18T23:59:59').getTime(); %>
 
 <script> window.votingEndTime = <%= votingEndTime %>;
 
const votingEndTime = <%= votingEndTime %>;
 
res.render("voting.ejs");
 
res.render('voting.ejs', { votingEndTime: votingEndTime.getTime() });

 
 const votingEndTime = <%= votingEndTime %>; // Voting end time in milliseconds
 
Voting time ends in:
 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name, citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    if (err.code === '23505') {
      // PostgreSQL unique constraint violation error
      }if (err.constraint === 'users_citizenship_no_key') {
        res.render('additional_info.ejs', { error: 'Citizenship number already exists' });
      }if (err.constraint === 'users_phone_no_key') {
        res.render('additional_info.ejs', { error: 'Phone number already exists' });
      
    } else {
      // Other database errors
      console.error("Error saving additional information:", err);
      const errorMessage = "Error saving additional information. Please try again later.";
      res.render("additional_info.ejs", { error: errorMessage });
    }
  }
});
 
/voting
 
none
 
res.status(500).send("Error saving additional information");
 
 if (err.constraint === 'users_username_key') {
        res.render('signup', { error: 'Username already exists' });
 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name,  citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    console.error("Error saving additional information:", err);
    const errorMessage = "Error saving additional information. Please try again later.";
    res.render("additional_info.ejs", { error: errorMessage });
  }
});
 
 <% if (error) { %>
      <p style="color: red;"><%= error %></p>
    <% } %>
 
res.status(500).send("Error saving additional information");
 
    <div id="message">
        <% if (success) { %>
            <p><%= success %></p>
        <% } else if (error) { %>
            <p><%= error %></p>
        <% } %>
    </div>
 
app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.', success: '' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!', error: '' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.', success: '' });
  }
});

 
app.post("/vote", async (req, res) => {
  const candidate = req.body.candidate;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.render('voting.ejs', { error: 'You have already voted.' });
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.render('voting.ejs', { success: 'Thank you for voting!' });
  } catch (err) {
    console.error("Error casting vote:", err);
    res.render('voting.ejs', { error: 'Error casting vote. Please try again later.' });
  }
});
 
app.post("/vote", async (req, res) => {
  const { candidate } = req.body;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.status(400).send('You have already voted.');
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.send('Thank you for voting!');
  } catch (err) {
    console.error("Error casting vote:", err);
    res.status(500).send("Error casting vote");
  }
});
 
app.post("/vote", async (req, res) => {
  const { candidate } = req.body;

  try {
    // Check if the user has already voted
    const checkResult = await db.query("SELECT * FROM votes WHERE voter_id = $1", [req.user.id]);
    if (checkResult.rows.length > 0) {
      return res.status(400).send('You have already voted.');
    }

    // Save the vote to the database
    await db.query("INSERT INTO votes (candidate, voter_id) VALUES ($1, $2)", [candidate, req.user.id]);
    console.log(`Vote cast for ${candidate} by user ${req.user.id}`);
    res.send('Thank you for voting!');
  } catch (err) {
    console.error("Error casting vote:", err);
    res.status(500).send("Error casting vote");
  }
});
 
 margin-bottom: 10px;
 
margin-bottom: 10px;
 
none
 
<label for="candidate1">Balen Shah</label>
 
<label for="candidate4">Dhana Raj Acharya</label>
 
<label for="candidate3">Candidate 3</label>
 
<label for="candidate2">Harka Sampang</label>
 
es.render("login.ejs");
 
app.post("/login", passport.authenticate("local", {
  successRedirect: "/voting",
  
}), (req, res) => {
  // If authentication fails, render the login page with an error message
  if (!req.user) {
    res.render("login.ejs", { error: "Invalid email or password" });
  }
});
 
})
 
failureRedirect: "/login"
 
 successRedirect: "/voting",
 
 <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
 
<% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
 
{ error: null });
 
 res.render("login.ejs")
 
"/login"
 
 <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
 
app.post("/login",passport.authenticate("local", {
    successRedirect: "/voting",
    failureRedirect: "/login",
  })
);
 
 if (checkResult.rows.length > 0) {
 
res.redirect("/login");
 
ignup
 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name,  citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    console.error("Error saving additional information:", err);
    res.status(500).send("Error saving additional information");
  }
});
 
<%- include('partials/header') %>

<div class="container">
  <div class="sub-container">
    <h1>CREATE NEW ACCOUNT</h1>
    <form action="/save-additional-info" method="post" onsubmit="return validateForm()" class="login-form">
      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" class="design" name="username">
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" class="design" name="first_name">
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" class="design" name="last_name">
      </div>
      <div class="form-group">
        <label for="phone_no">Citizenship no.:</label>
        <input type="number" id="citizenship_no" class="design" name="citizenship_no">
        <span id="citizenshipNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no" maxlength="10" oninput="validatePhoneNumber()">
        <span id="phoneNoError" style="color: red;"></span>
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" class="design" name="address">
      </div>
      <button type="submit" class="btn">Submit</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name,  citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    console.error("Error saving additional information:", err);
    res.status(500).send("Error saving additional information");
  }
});
 
res.status(400).json({ error: "Username already exists" });
 
if (existingUsername.rows.length > 0) {
      // If username already exists, send error message to frontend
 
// Check if username already exists in the database
    const existingUsername = await db.query("SELECT * FROM users WHERE username = $1", [username]);

 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name,  citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    console.error("Error saving additional information:", err);
    res.status(500).send("Error saving additional information");
  }
});
 
<input type="number" id="citizenship_no" class="design" name="citizenship_no">
        <span id="citizenshipNoError" style="color: red;"></span>
 
<input type="number" id="citizenship_no" class="design" name="citizenship_no">
 
app.post("/save-additional-info", async (req, res) => {
  const { username, first_name, last_name,  citizenship_no, phone_no, address } = req.body;

  try {
    // Insert additional information into the database
    await db.query("INSERT INTO users (username, first_name, last_name, citizenship_no, phone_no, address) VALUES ($1, $2, $3, $4, $5 ,$6)", [username, first_name, last_name, citizenship_no, phone_no, address]);
    
    // Redirect or send response upon successful insertion
    res.redirect("/login");
  } catch (err) {
    console.error("Error saving additional information:", err);
    res.status(500).send("Error saving additional information");
  }
});
 
 (exactly 10 digits)
 
function validatePhoneNumber() {
  var input = document.getElementById("phone_no").value;
  var errorSpan = document.getElementById("phoneNoError");

  if (/^\d{10}$/.test(input)) {
      errorSpan.textContent = ""; // Clear error message if input is valid
  } else {
      errorSpan.textContent = "Please enter exactly 10 digits"; // Show error message
  }
}
 
<div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" class="design" name="phone_no">
      </div>
 
.background {
 
    </div>
 
 </div>
 
        <div class="background">
 
class="background"
 
</div>
 
 background-color: #a7aee7; /* Choose your desired background color */
    border-radius: 10px; /* Add some border radius for a nicer look */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle box shadow for depth */
    padding: 20px; /* Add some padding for spacing inside the form */
    margin: auto;
    width: 580px;
 
    background-color: #ffffff; /* Choose your desired background color */
    border-radius: 10px; /* Add some border radius for a nicer look */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle box shadow for depth */
    padding: 20px; /* Add some padding for spacing inside the form */
 
</div>
 
 <input type="submit" value="Vote">
 
.backgr some padding for spacing inside the form */
}

 
ound {
    background-color:blue; /* Choose your desired background color */
    border-radius: 10px; /* Add some border radius for a nicer look */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle box shadow for depth */
    padding: 20px; /* Add
 
.background{
    margin-left: 10px;
    background-color: red;
    height: 500px;
    width: 1000px;
}
 
 </div>
 
 <div class="background">
 
</div>
 
display: flex;
     justify-content: center;
     align-items: center;
 
block
 
display: flex;
 
text-align: center;
 
padding-left: 10px;
 
 display: flex;
    justify-content: center;
    align-items: center;
 
</div>
 
<div class="s_timebox">
 
.s_timebox{
    display: flex;
    height: 150px;
    width: 150px;
    justify-content: center;
    align-content: center;
}

 
</div>
 
        </div>
 
   <div class="s_timebox">
 

.s_timebox{
    display: flex;
    height: 150px;
    width: 150px;
    justify-content: center;
    align-content
 
 display: flex;
    justify-content: center;
    align-content: center;
 
.s_timebox{
    display: flex;
}
 
</div>
 
margin-bottom: 30px;
 
 padding: 20px;
 
body {
    margin: 0;
    padding: 0;
}

.information {
    height: 35px;
    width: 100%;
    background-color: red;
    padding-top: 1px; /* Adjust the positioning using padding */
    padding-bottom: 25px;
    padding-left: 10px;
    color: white;
    font-size: 16px;
    margin-bottom: 50px;
}

#currentDate {
    padding-left: 1100px;
    color: black !important;
}

.images {
    height: 150px;
    width: 150px;
    display: block; /* Set images to block level */
    margin: auto; /* Center images horizontally */
}

.candidate-form {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr;
  justify-items: center; 
  width: 60%;
}

.candidate-form .candidate {
    text-align: center; /* Center align text */
}

.c1{
    grid-area:1/1/2/2;
}
.c2{
    grid-area: 1/2/2/2;
}
.c3{
    grid-area: 2/1/3/2;
}
.c4{
    grid-area: 2/2/3/3;
}

 
/* Center align items horizontally */
 
  grid-gap: 20px;
 
repeat(auto-fit, minmax(150px, 1fr)); /* Adjust based on your requirements */
 
</div>
 
class="candidate-form"
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>
<body>
    <div class="information">
        <p>View the list of candidates and their profiles below. <br>
        Note: "Please be aware that the voting window is monitored. Kindly ensure to submit your vote before the allotted time expires"</p>
        <span id="currentDate"></span>
    </div>

    <form action="/vote" method="post">
        <div class="candidate-form">
        <div class="candidate">
            <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
            <label for="candidate1">Balen</label>
            <input type="radio" id="candidate1" name="candidate" value="candidate1">
        </div>
        <div class="candidate">
            <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
            <label for="candidate2">Candidate 2</label>
            <input type="radio" id="candidate2" name="candidate" value="candidate2">
        </div>
        <div class="candidate">
            <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
            <label for="candidate3">Candidate 3</label>
            <input type="radio" id="candidate3" name="candidate" value="candidate3">
        </div>
        <div class="candidate">
            <img class="images" src="/img/candidate_4.jpg" alt="Candidate 4">
            <label for="candidate4">Candidate 4</label>
            <input type="radio" id="candidate4" name="candidate" value="candidate4">
        </div>
    </div>
        <input type="submit" value="Vote">
    </form>

    <script src="/index.js"></script>
</body>
</html>

 
</div>
 
class="candidate-form"
 
body{
    margin: 0;
    padding: 0;
}

.information{
    height: 35px;
    width: 100%;
    background-color: red;
    padding-top: 1px; /* Adjust the positioning using padding */
    padding-bottom: 25px;
    padding-left: 10px;
    color: white;
    font-size: 16px;
    }

    #currentDate{
        padding-left: 1100px;
        color: black !important;

    }

    .images{
        height: 100px;
        width: 100px;
    }


 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>
<body>
    <div class="information">
        <p>View the list of candidate and their profile below <br>
        Note: "Please be aware that voting window is monitered. Kindly ensure to submit your vote before the alloted time exprires"</p>

    <span id="currentDate"></span>
</div>




    <form action="/vote" method="post">
        <p>Choose your candidate:</p>
        <label for="candidate1">
            <input type="radio" id="candidate1" name="candidate" value="candidate1">Balen
            <img class="images" src="/img/candidate_1.jpg" alt="Candidate 1">
        </label>
        <label for="candidate2">
            <input type="radio" id="candidate2" name="candidate" value="candidate2">
            <img class="images" src="/img/candidate_2.webp" alt="Candidate 2">
        </label>
        <label for="candidate3">
            <input type="radio" id="candidate3" name="candidate" value="candidate3">
            <img class="images" src="/img/candidate_3.jpg" alt="Candidate 3">
        </label>
        <label for="candidate4">
            <input type="radio" id="candidate4" name="candidate" value="candidate4">
            <img class="images" src="/img/candidate_4.jpg" alt="Candidate 3">
        </label>
        <input type="submit" value="Vote">
    </form>

    <script src="/index.js"></script>
</body>
</html>

 
Balen
 
candidate_4.jpg
 
candidate_1.jpg
 
candidate_3.jpg
 
display: flex;
 
</div>
 
<p>The current date is: <%= currentDate %></p>
 
<form action="/vote" method="post">
        <p>Choose your candidate:</p>
        <input type="radio" id="candidate1" name="candidate" value="candidate1">
        <label for="candidate1">Candidate 1</label><br>
        <input type="radio" id="candidate2" name="candidate" value="candidate2">
        <label for="candidate2">Candidate 2</label><br>
        <input type="submit" value="Vote">
    </form>
 
  /* Adjust the positioning using padding */
 
   padding-top: 10px;
 
.information{
    height: 35px;
    width: 100%;
    background-color: red;
    margin:0;
    padding-top: 10px; /* Adjust the positioning using padding */
    }
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voting Page</title>
    <link rel="stylesheet" href="/voting_page.css">
</head>
<body>
    <div class="information">
        <p>View the list of candidate and their profile below <br>
        Note: "Please be aware that voting window is monitered. Kindly ensure to submit your vote before the alloted time exprires"</p>
    </div>
</body>
</html>

 
<div class="information">
 
.information {
        height: 35px;
        width: 100%;
        background-color: red;
 
 margin:-10px;
 
<%- include('partials/header') %>





<%- include('partials/footer') %>
 
<h1 id="hello">Hello world</h1>
 
background-color:#f1eeee;
  border-radius: 10px;
  
 
Host_name="localhost"
DB_name="voting_system_database"
Password="Godsking@123"
Port="5432"
 
 "Godsking@123"
 
 "voting_system_database"
 
user: "postgres",
  host: "localhost",
  database: "voting_system_database",
  password: "Godsking@123",
  port: 5432,
 
User_name="postgres";
Host_name="localhost";
DB_name="voting_system_database";
Password="Godsking@123";
Port="5432";
 
arseInt(process.env.Port)
 
process.env.Port
 
User_name="postgres";
Host_name="localhost";
DB_name="voting_system_database";
Password="Godsking@123";
Port="5432";
 
5432
 
"Godsking@123"
 
"voting_system_database"
 
"localhost"
 
"postgres"
 
app.post("/save-additional-info", (req, res) => {
  const { username, first_name, last_name, phone_no, address } = req.body;

  const query =
    "INSERT INTO additional_info (username, first_name, last_name, phone_no, address) VALUES ($1, $2, $3, $4, $5)";
  const values = [username, first_name, last_name, phone_no, address];

  db.query(query, values)
    .then(() => res.send("Additional information saved successfully"))
    .catch((err) => {
      console.error("Error executing query", err);
      res.status(500).send("Error saving additional information");
    });
});
 

/* Add this CSS to manage the layout */
.form-group {
  margin-bottom: 15px;
}

.sub-container form {
  width: 100%;
}

 
<%- include('partials/header') %>

<div class="container">
  <div class="sub-container">
    <h1>CREATE NEW ACCOUNT</h1>
    <form action="/save-additional-info" method="post">
      <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username">
      </div>
      <div class="form-group">
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" name="first_name">
      </div>
      <div class="form-group">
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" name="last_name">
      </div>
      <div class="form-group">
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" name="phone_no">
      </div>
      <div class="form-group">
        <label for="address">Address:</label>
        <input type="text" id="address" name="address">
      </div>
      <button type="submit" class="btn">Submit</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
/* Add this CSS to manage the layout */
.form-row {
  display: flex;
  justify-content: space-between;
  margin-bottom: 15px;
}

.form-group {
  flex: 1;
  margin-right: 10px;
}

.sub-container form {
  width: 100%;
}
 
<%- include('partials/header') %>

  <div class="container">
    <div class="sub-container">
      <h1>CREATE NEW ACCOUNT</h1>
      <form action="/save-additional-info" method="post">
        <div class="form-row">
          <div class="form-group">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username">
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="first_name">First Name:</label>
            <input type="text" id="first_name" name="first_name">
          </div>
          <div class="form-group">
            <label for="last_name">Last Name:</label>
            <input type="text" id="last_name" name="last_name">
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label for="phone_no">Phone no.:</label>
            <input type="tel" id="phone_no" name="phone_no">
          </div>
          <div class="form-group">
            <label for="address">Address:</label>
            <input type="text" id="address" name="address">
          </div>
        </div>
        <button type="submit" class="btn">Submit</button>
      </form>
    </div>
  </div>

  <%- include('partials/footer') %>
 
<%- include('partials/header') %>


<div class="container">
    <div class="sub-container">
      <h1>CREATE NEW ACCOUNT</h1>
      <form action="/save-additional-info" method="post">
          <label for="username">Username:</label>
          <input type="text" id="username" name="username" >

          <label for="first_name">First Name:</label>
          <input type="text" id="first_name" name="first_name">

          <label for="middle_name">Middle Name:</label>
          <input type="text" id="middle_name" name="middle_name" >

          <label for="phone_no">Phone no.:</label>
          <input type="tel" id="phone_no" name="phone_no">

          <label for="citizenship_no">Citizenship no.:</label>
          <input type="text" id="citizenship_no" name="citizenship_no" >

          <label for="address">Address:</label>
          <input type="text" id="address" name="address" >

          <label for="last_name">Last Name:</label>
          <input type="text" id="last_name" name="last_name">

          <button type="submit" class="btn">Submit</button>
    </div>
  </div>

  <%- include('partials/footer') %>

 
<%- include('partials/header') %>


<div class="container">
    <div class="sub-container">
      <h1>CREATE NEW ACCOUNT</h1>
      <form action="/save-additional-info" method="post">
          <label for="username">Username:</label>
          <input type="text" id="username" name="username" >

          <label for="first_name">First Name:</label>
          <input type="text" id="first_name" name="first_name">

          <label for="middle_name">Middle Name:</label>
          <input type="text" id="middle_name" name="middle_name" >

          <label for="phone_no">Phone no.:</label>
          <input type="tel" id="phone_no" name="phone_no">

          <label for="citizenship_no">Citizenship no.:</label>
          <input type="text" id="citizenship_no" name="citizenship_no" >

          <label for="address">Address:</label>
          <input type="text" id="address" name="address" >

          <label for="last_name">Last Name:</label>
          <input type="text" id="last_name" name="last_name">

          <button type="submit" class="btn">Submit</button>
    </div>
  </div>

  <%- include('partials/footer') %>

 
.new-container{
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: #fff;
  cursor: pointer;
}

.new-container button:hover {
  background-color: #0056b3;
}
 
 /* Blue button background color */
 
 /* White text color */
 
/* Darker shade of blue on hover */
 
input[type="password"]
 
 input[type="email"]
 

.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #f9f9f9;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
}
 
.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 30px;
}

.additional-container label {
  display: block;
  margin-bottom: 5px;
}

.additional-container input[type="text"],
.additional-container input[type="tel"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  box-sizing: border-box;
}
 
<h1>Additional Information</h1>
 
<br>
 
<br>
 
<br>
 

</body>
</html>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/aditionalinfo.css">
</head>
<body>
    
 
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 
 
.additional-container {
    max-width: 600px;
    margin: 50px auto;
    padding: 30px;
    border: 1px solid #ccc;
    border-radius: 10px;
    background-color: #f9f9f9;
    box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
  }
  
  .additional-container h1 {
    text-align: center;
    color: #3498db;
    margin-bottom: 30px;
  }
  
  .additional-container label {
    display: block;
    margin-bottom: 5px;
  }
  
  .additional-container input[type="text"],
  .additional-container input[type="tel"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }
 
 /* Adjust the URL to your actual background image */
 
</body>
</html>
 
<%- include('partials/header') %>
 
<div class="container">
     <div class="additional-container">
      <h1>Additional Page</h1>
      <h1>Additional Information</h1>
      <form action="/save-additional-info" method="post">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" >
  
        <label for="first_name">First Name:</label>
        <input type="text" id="first_name" name="first_name">
  
        <label for="middle_name">Middle Name:</label>
        <input type="text" id="middle_name" name="middle_name" >
  
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" name="phone_no">
  
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="text" id="citizenship_no" name="citizenship_no" >
  
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" >
  
        <label for="last_name">Last Name:</label>
        <input type="text" id="last_name" name="last_name">
      </form>
    </div>
  </div>

  
 
</div>
 
<div class="sub-container">
 
.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 2px solid #3498db;
  border-radius: 10px;
  background-color: #ecf0f1;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
  display: grid; /* Apply display grid to the container */
  grid-template-columns: auto auto; /* Two columns */
  gap: 10px; /* Gap between grid items */
}

.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 20px;
}

.additional-container form {
  margin-bottom: 20px;
}

.additional-container label {
  font-weight: bold;
  color: #2c3e50;
}

.additional-container input[type="text"],
.additional-container input[type="tel"] {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.additional-container input[type="text"]:focus,
.additional-container input[type="tel"]:focus {
  border-color: #3498db;
  outline: none;
}

.additional-container button[type="submit"] {
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 5px;
  background-color: #3498db;
  color: #fff;
  font-size: 16px;
  cursor: pointer;
}

.additional-container button[type="submit"]:hover {
  background-color: #2980b9;
}

 
.sub-container{
  display: grid;
  height: 100px;
  width: 100px;
}
 
</div>
 
 display: grid;
 
* Additional page specific styling */
.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #f9f9f9;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
}


 
<%- include('partials/header') %>

<div class="container">
  <div class="additional-container">
    <h1>Additional Page</h1>
    <h1>Additional Information</h1>
    <form action="/save-additional-info" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" >
        <label for="first_name">First Name:</label><br>
        <input type="text" id="first_name" name="first_name">
        <label for="middle_name">Middle Name:</label><br>
        <input type="text" id="middle_name" name="middle_name" >
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" name="phone_no">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="text" id="citizenship_no" name="citizenship_no" >
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" >
        <label for="last_name">Last Name:</label><br>
        <input type="text" id="last_name" name="last_name">
  </div>
</div>

<%- include('partials/footer') %>

 
.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 30px;
}

.additional-container p {
  font-size: 18px;
  line-height: 1.6;
  color: #333;
}

.additional-container a {
  color: #3498db;
  text-decoration: none;
  transition: color 0.3s ease;
}

.additional-container a:hover {
  color: #2980b9;
}
 
.additional-container {
  width: 500px;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  background-color: #fff;
}

.additional-container h1 {
  text-align: center;
  margin-bottom: 20px;
}

.additional-container label {
  display: block;
  margin-bottom: 5px;
}

.additional-container input[type="text"],
.additional-container input[type="tel"] {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-bottom: 10px;
}

.additional-container input[type="submit"] {
  width: 100%;
  padding: 8px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.additional-container input[type="submit"]:hover {
  background-color: #45a049;
}
 
/* Additional page specific styling */
 
.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 2px solid #3498db;
  border-radius: 10px;
  background-color: #ecf0f1;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
}

.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 30px;
}

.additional-container form {
  margin-bottom: 20px;
}

.additional-container label {
  display: block;
  margin-bottom: 5px;
  font-weight: bold;
  color: #2c3e50;
}

.additional-container input[type="text"],
.additional-container input[type="tel"] {
  width: calc(100% - 20px);
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.additional-container input[type="text"]:focus,
.additional-container input[type="tel"]:focus {
  border-color: #3498db;
  outline: none;
}

.additional-container button[type="submit"] {
  display: block;
  width: 100%;
  padding: 10px;
  border: none;
  border-radius: 5px;
  background-color: #3498db;
  color: #fff;
  font-size: 16px;
  cursor: pointer;
}

.additional-container button[type="submit"]:hover {
  background-color: #2980b9;
}

 
.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 2px solid #3498db;
  border-radius: 10px;
  background-color: #ecf0f1;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
}

.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 30px;
}

.additional-container p {
  font-size: 18px;
  line-height: 1.6;
  color: #333;
}

.additional-container a {
  color: #3498db;
  text-decoration: none;
  transition: color 0.3s ease;
}

.additional-container a:hover {
  color: #2980b9;
}
 

/* Additional page specific styling */
.additional-container {
  max-width: 600px;
  margin: 50px auto;
  padding: 30px;
  border: 2px solid #3498db;
  border-radius: 10px;
  background-color: #ecf0f1;
  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
}

.additional-container h1 {
  text-align: center;
  color: #3498db;
  margin-bottom: 30px;
}

.additional-container p {
  font-size: 18px;
  line-height: 1.6;
  color: #333;
}

.additional-container a {
  color: #3498db;
  text-decoration: none;
  transition: color 0.3s ease;
}

.additional-container a:hover {
  color: #2980b9;
}

 
.additional-container {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 5px;
  background-color: #f9f9f9;
}

.additional-container h1 {
  text-align: center;
}
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Additional Information</title>
</head>
<body>
    <h1>Additional Information</h1>
    <form action="/save-additional-info" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" >
        <label for="first_name">First Name:</label><br>
        <input type="text" id="first_name" name="first_name">
        <label for="middle_name">Middle Name:</label><br>
        <input type="text" id="middle_name" name="middle_name" >
        <label for="phone_no">Phone no.:</label>
        <input type="tel" id="phone_no" name="phone_no">
        <label for="citizenship_no">Citizenship no.:</label>
        <input type="text" id="citizenship_no" name="citizenship_no" >
        <label for="address">Address:</label>
        <input type="text" id="address" name="address" >
        <label for="last_name">Last Name:</label><br>
        <input type="text" id="last_name" name="last_name">




 
 <!-- Your content for the additional page goes here -->
 
readonly value="{{last_name}}
 
readonly value="{{phone_no}}
 
readonly value="{{address}}"
 
readonly value="{{citizenship_no}}"
 
<br>
 
<br>
 
<br>
 
<br>
 
<br>
 
<br>
 
<br>
 
<br>
 
<br>
 
readonly value="{{middle_name}}"
 
readonly value="{{first_name}}"
 
readonly value="{{username}}"
 
readonly value="{{username}}">
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Additional Information</title>
</head>
<body>
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Additional Information</title>
</head>
<body>
    <h1>Additional Information</h1>
    <form action="/save-additional-info" method="post">
        <label for="username">Username:</label><br>
        <input type="text" id="username" name="username" readonly value="{{username}}"><br>
        <label for="first_name">First Name:</label><br>
        <input type="text" id="first_name" name="first_name" readonly value="{{first_name}}"><br>
        <label for="middle_name">Middle Name:</label><br>
        <input type="text" id="middle_name" name="middle_name" readonly value="{{middle_name}}"><br>
        <label for="phone_no">Phone no.:</label><br>
        <input type="tel" id="phone_no" name="phone_no" readonly value="{{phone_no}}"><br>
        <label for="citizenship_no">Citizenship no.:</label><br>
        <input type="text" id="citizenship_no" name="citizenship_no" readonly value="{{citizenship_no}}"><br>
        <label for="address">Address:</label><br>
        <input type="text" id="address" name="address" readonly value="{{address}}"><br>
        <label for="last_name">Last Name:</label><br>
        <input type="text" id="last_name" name="last_name" readonly value="{{last_name}}
</body>
</html>
 
<h1>Additional Information</h1>
    <form action="/save-additional-info" method="post">
        <label for="email">Email:</label><br>
        <input type="email" id="email" name="email"><br>
        <label for="password">Password:</label><br>
        <input type="password" id="password" name="password"><br>
        <button type="submit">Save Additional Information</button>
    </form>
 
console.log("success");
 
 display: block;
    height: 50px;
    width: 50px;
    padding-top: 10px;
    padding-left: 10px;
    padding-right: 10px;
    color:white;
    text-decoration: none;
    border-radius: 10px;
    background-color: red;
 
height: 50px;
    width: 50px;
 
  height: 50px;
 
/div>
 
"TOPSECRETWORD"
 
"TOPSECRETWORD"
 
app.post("/login", async (req, res) => {
  const email = req.body.username;
  const loginPassword = req.body.password;

  try {
    const result = await db.query("SELECT * FROM voters WHERE email = $1", [
      email,
    ]);
    if (result.rows.length > 0) {
      const user = result.rows[0];
      const storedHashedPassword = user.password;
      //verifying the password
      bcrypt.compare(loginPassword, storedHashedPassword, (err, result) => {
        if (err) {
          console.error("Error comparing passwords:", err);
        } else {
          if (result) {
            res.render("voting.ejs");
          } else {
            res.send("Incorrect Password");
          }
        }
      });
    } else {
      res.send("User not found");
    }
  } catch (err) {
    console.log(err);
  }
});
 
passport.use(
  new Strategy(async function verify(username, password, cb) {})
 
res.render("voting.ejs");
 
console.log("Hashed Password:", hash);
 
res.send("Email already exists. Try logging in.");
 
res.send("Email already exists. Try logging in.");
 
 "session": "^0.1.0"
 
"env": "^0.0.2",
 
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static("public"));
 
import session from "express-session";
 
import env from "dotenv";
 
import session from "express-session";
import env from "dotenv";
 
<div> <!-- New div for Confirm Password -->
        <label for="confirm_password">Confirm Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="form-control" id="confirmPasswordInput" name="confirm_password">
          <span class="toggle-password" onclick="togglePasswordVisibility('confirmPasswordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
 
<div> <!-- New div for Confirm Password -->
        <label for="confirm_password">Confirm Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="form-control" id="confirmPasswordInput" name="confirm_password">
          <span class="toggle-password" onclick="togglePasswordVisibility('confirmPasswordInput')">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
 
<h1 id="hello">Hello world</h1>
 
div class="navigation_bar">
  <div class="left_items">
    <a class="nav eBallot" href="">eBallot</a>
    <a class="nav" href="">About Us</a>
    <a class="nav" href="">Programs</a>
    <a class="nav" href="">Contacts</a>
  </div>
  <div class="right_items">
    <a class="nav main login" href="/login" role="button">Login</a>
    <a class="nav main sign_up" href="/register" role="button">Sign Up</a>
  </div>
</div>
 
app.post("/register", async (req, res) => {
const email=req.body.username;
const password=req.body.password;

});

app.post("/login", async (req, res) => {});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

 
pp.use(express.static('public'));
 
// function togglePasswordVisibility() {
//   const passwordInput = document.getElementById('passwordInput');
//   const togglePasswordIcon = document.querySelector('.toggle-password i');

//   if (passwordInput.type === 'password') {
//     passwordInput.type = 'text';
//     togglePasswordIcon.classList.remove('fa-eye');
//     togglePasswordIcon.classList.add('fa-eye-slash');
//   } else {
//     passwordInput.type = 'password';
//     togglePasswordIcon.classList.remove('fa-eye-slash');
//     togglePasswordIcon.classList.add('fa-eye');
//   }
// }
 
<%- include('partials/header') %>

<div class="container">
  <div class="login-container">
    <h1>Register</h1>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST">
      <div>
        <label for="email">Email</label>
        <input type="email" class="form-control" name="username">
      </div>
      <div>
        <label for="password">Password</label>
        <div class="password-input-wrapper">
          <input type="password" class="form-control" id="passwordInput" name="password">
          <span class="toggle-password" onclick="togglePasswordVisibility()">
            <i class="fas fa-eye"></i> <!-- Font Awesome eye icon -->
          </span>
        </div>
      </div>
      <div> <!-- New div for Confirm Password -->
        <label for="confirm_password">Confirm Password</label>
        <input type="password" class="form-control" name="confirm_password">
      </div>
      <button type="submit" class="btn btn-dark">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>


 

<%- include('partials/header') %>

<div class="container">
  <div class="login-container">
    <h1>Register</h1>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST">
      <div>
        <label for="email">Email</label>
        <input type="email" class="form-control" name="username">
      </div>
      <div>
        <label for="password">Password</label>
        <input type="password" class="form-control" name="password">
      </div>
      <div> <!-- New div for Confirm Password -->
        <label for="confirm_password">Confirm Password</label>
        <input type="password" class="form-control" name="confirm_password">
      </div>
      <button type="submit" class="btn btn-dark">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>
 
function togglePasswordVisibility() {
    const passwordInput = document.getElementById('passwordInput');
    const togglePasswordIcon = document.querySelector('.toggle-password i');
  
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      togglePasswordIcon.classList.remove('fa-eye');
      togglePasswordIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput.type = 'password';
      togglePasswordIcon.classList.remove('fa-eye-slash');
      togglePasswordIcon.classList.add('fa-eye');
    }
  }
  
 
<script>
function togglePasswordVisibility() {
    const passwordInput = document.getElementById('passwordInput');
    const togglePasswordIcon = document.querySelector('.toggle-password i');
  
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      togglePasswordIcon.classList.remove('fa-eye');
      togglePasswordIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput.type = 'password';
      togglePasswordIcon.classList.remove('fa-eye-slash');
      togglePasswordIcon.classList.add('fa-eye');
    }
  }
  
  </script>
 
passwordInput.style.width = ''; // Reset width to auto
 
padding:10px;
 
passwordInput.style.width = '217px'; // Maintain current width
      passwordInput.style.height = '32px'; // Maintain current width
 
 .password-input-wrapper input[type="password"] {
    padding-right: 35px; /* Adjust as needed to accommodate the icon */
  }
  
 
// Reset width to auto
 
passwordInput.style.width = passwordInput.clientWidth + 'px'; // Maintain current width
 
<%- include('partials/header') %>

<div class="container">
  <div class="login-container">
    <h1>Register</h1>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST">
      <div>
        <label for="email">Email</label>
        <input type="email" class="form-control" name="username">
      </div>
      <div>
        <label for="password">Password</label>
        <input type="password" class="form-control" name="password">
      </div>
      <button type="submit" class="btn btn-dark">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
<%- include('partials/header') %>

<div class="container">
  <div class="register-container">
    <h1>Register</h1>
    <!-- Makes POST request to /register route -->
    <form action="/register" method="POST">
      <div>
        <label for="email">Email</label>
        <input type="email" class="form-control" name="username">
      </div>
      <div>
        <label for="password">Password</label>
        <input type="password" class="form-control" name="password">
      </div>
      <button type="submit" class="btn btn-dark">Register</button>
    </form>
  </div>
</div>

<%- include('partials/footer') %>

 
<%- include('partials/header') %>
  <div class="">
    <h1>Register</h1>

    
        

            <!-- Makes POST request to /register route -->
            <form action="/register" method="POST">
              <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" name="username">
              </div>
              <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" name="password">
              </div>
              <button type="submit" class="btn btn-dark">Register</button>
            </form>

   
  </div>

  <%- include('partials/header') %>
 
container mt-5
 
 </div>
 
  <div class="card-body">
 
 </div>
        </div>
      </div>

 
<div class="row">
      <div class="col-sm-8">
        <div class="card">
 
<div class="row">
      <div class="col-sm-8">
        <div class="card">
 
<!-- <div class="col-sm-4">
      <div class="card social-block">
        <div class="card-body">
          <a class="btn btn-block" href="/auth/google" role="button">
            <i class="fab fa-google"></i>
            Sign Up with Google
          </a>
        </div>
      </div>
    </div> -->
 
.password-input-wrapper {
    position: relative;
  }
  
  .password-input-wrapper input[type="password"] {
    padding-right: 35px; /* Adjust as needed to accommodate the icon */
    transition: width 0.3s; /* Add transition for smoother animation */
  }
  
  .password-input-wrapper .toggle-password {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
  }
 
unction togglePasswordVisibility() {
    const passwordInput = document.getElementById('passwordInput');
    const togglePasswordIcon = document.querySelector('.toggle-password i');
  
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      togglePasswordIcon.classList.remove('fa-eye');
      togglePasswordIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput.type = 'password';
      togglePasswordIcon.classList.remove('fa-eye-slash');
      togglePasswordIcon.classList.add('fa-eye');
    }
  }
 

  .password-input-wrapper {
    position: relative;
  }
  
  .password-input-wrapper input[type="password"] {
    padding-right: 35px; /* Adjust as needed to accommodate the icon */
  }
  
  .password-input-wrapper .toggle-password {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
  }
 
.password-input-wrapper {
    position: relative;
    display: flex; /* Use flexbox to keep label and input on the same line */
    align-items: center; /* Vertically center items */
  }
  
  .toggle-password {
    cursor: pointer;
  }
  
  /* Adjust the input field padding to create space for the eye icon */
  .form-control {
    padding-right: 30px; /* Adjust as needed */
  }
  
  /* Set a fixed height for the container to prevent it from changing */
  .container {
    min-height: 50px; /* Adjust as needed */
  }
  
 
.password-input-wrapper {
    position: relative;
    display: flex; /* Use flexbox to keep label and input on the same line */
    align-items: center; /* Vertically center items */
  }
 
 /* Adjust the input field padding to create space for the eye icon */
  .form-control {
    padding-right: 30px; /* Adjust as needed */
  }
  
  /* Set a fixed height for the container to prevent it from changing */
  .container {
    min-height: 50px; /* Adjust as needed */
  }
 
position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
 
.password-input-wrapper {
    position: relative;
    display: inline-block; /* Use inline-block to prevent the container from expanding */
  }
  
  .toggle-password {
    position: absolute;
    top: 50%;
    right: 5px; /* Adjust the right position */
    transform: translateY(-50%);
    cursor: pointer;
  }
 
.password-input-wrapper {
    position: relative;
    display: inline-block; /* Use inline-block to prevent the container from expanding */
    vertical-align: top; /* Align the container's top edge with the top of the input */
  }
  
  .toggle-password {
    position: absolute;
    top: 50%;
    right: 5px; /* Adjust the right position */
    transform: translateY(-50%);
    cursor: pointer;
  }
  
  /* Adjust the input field padding to create space for the eye icon */
  .form-control {
    padding-right: 30px; /* Adjust as needed */
    box-sizing: border-box; /* Include padding in the input's width calculation */
  }
  
  /* Set a fixed height for the container to prevent it from changing */
  .container {
    min-height: 50px; /* Adjust as needed */
  }
  
  
 
.password-input-wrapper {
    position: relative;
    display: flex; /* Use flexbox to keep label and input on the same line */
    align-items: center; /* Vertically center items */
  }
  
  .toggle-password {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
  }
  
  /* Adjust the input field padding to create space for the eye icon */
  .form-control {
    padding-right: 30px; /* Adjust as needed */
  }
  
  /* Set a fixed height for the container to prevent it from changing */
  .container {
    min-height: 50px; /* Adjust as needed */
  }
 
.password-input-wrapper {
    position: relative;
    display: inline-block; /* Ensures the wrapper only takes up the necessary width */
  }
  
  .toggle-password {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
  }
  
  /* Adjust the input field padding to create space for the eye icon */
  .form-control {
    padding-right: 30px; /* Adjust as needed */
  }
  
 
.password-input-wrapper {
    position: relative;
  }
  
  .toggle-password {
    position: absolute;
    top: 50%;
    right: 10px;
    transform: translateY(-50%);
    cursor: pointer;
  }
  
 
<script src="/public/index.js"></script>
 
<!-- Font Awesome eye icon -->
 
<div>
        <label for="password">Password</label>
        <input type="password" class="form-control" id="passwordInput" name="password">
      </div>
 
 <!-- Add this link in the <head> section of your HTML -->
 
<label for="showPasswordCheckbox">Show Password</label>
        <input type="checkbox" id="showPasswordCheckbox"> <!-- Checkbox for toggling password visibility -->
 
 <div>
        <label for="password">Password</label>
        <input type="password" class="form-control" name="password">
        
          <input type="checkbox" id="showPasswordCheckbox"> <!-- Checkbox for toggling password visibility -->
          <label for="showPasswordCheckbox">Show Password</label>
          <label for="password">Password</label>
          <input type="password" class="form-control" id="passwordInput" name="password">
        
        
      </div>
 
<label for="password">Password</label>
        <input type="password" class="form-control" name="password">
 
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-image: url('blue-background.jpg'); /* Adjust the URL to your actual background image */
    background-size: cover;
    background-position: center;
  }
  
  .login-container {
    background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .login-container h1 {
    text-align: center;
    color: #333; /* Dark text color */
  }
  
  .login-container input[type="email"],
  .login-container input[type="password"] {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }
  
  .login-container button {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: none;
    border-radius: 5px;
    background-color: #007bff; /* Blue button background color */
    color: #fff; /* White text color */
    cursor: pointer;
  }
  
  .login-container button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
  }
  
  
 
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  
  .login-container {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .login-container h1 {
    text-align: center;
  }
 
.container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
  }
  
  .login-container {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .login-container h1 {
    text-align: center;
  }
 
.login{
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    align-content: center;
}
 
<%- include('partials/header') %>

<div>
  

  <div class="login">
    <h1>Login</h1>
          <!-- Makes POST request to /login route -->
          <form action="/login" method="POST">
            <div>
              <label for="email">Email</label>
              <input type="email" class="form-control" name="username">
            </div>
            <div>
              <label for="password">Password</label>
              <input type="password" class="form-control" name="password">
            </div>
            <button type="submit" class="btn btn-dark">Login</button>
          </form>
        </div>
</div>

<%- include('partials/footer') %>

 
 <h1>Login</h1>
 
flex-wrap: nowrap
 
<h1>Login</h1>
 
 </div>
    </div>
  </div>
 
 <div>
      <div>
        <div>
 
    <!-- <div class="col-sm-4">
      <div class="card">
        <div class="card-body">
          <a  href="/auth/google" role="button">
            <i class="fab fa-google"></i>
            Sign In with Google
          </a>
        </div>
      </div>
    </div> -->
 
 class="form-group"
 
class="form-group"
 
class="card-body"
 
class="card"
 
class="col-sm-8"
 
"container mt-5"
 
class="btn btn-block"
 
/* Ensure the background image covers the entire body */
 
/* Set the body height to 100% of the viewport height */
 
  /* background: linear-gradient(to bottom, #004c98, #101214); */
 
 height: 100px;
    width: 100px;
 
  height: 100vh;
 
background: url('images/Homepg.png');
 
background: linear-gradient(to bottom, #004c98, #101214);
 
justify-content: space-between;
 
/* Transparent background */
 
/* Add padding to space out items from edges */
 
/* Align items vertically */
 
/* Distribute items evenly */
 
body {
    margin: 0;
    padding: 0;
    height: 100vh;
    background: linear-gradient(to bottom, #004c98, #101214);
}

.navigation_bar {
    display: flex;
    justify-content: space-between; /* Distribute items evenly */
    align-items: center; /* Align items vertically */
    margin-top: 20px;
    padding: 0 20px; /* Add padding to space out items from edges */
}

.nav {
    text-decoration: none;
    color: white;
}

.main {
    border: 1px solid white;
    border-radius: 20px;
    padding: 6px 20px;
    background-color: rgba(93, 163, 207, 0.2); /* Transparent background */
    color: white;
    text-decoration: none;
}

/* Adjustments for smaller screens */
@media (max-width: 768px) {
    .navigation_bar {
        flex-direction: column; /* Stack items vertically */
    }

    .main {
        margin-top: 10px; /* Add space between buttons */
    }
}
 
<%- include('partials/header') %>


<div class="navigation_bar">
  <div><a class="nav eBallot" href="">eBallot</a> </div>
  <div><a class="nav" href="">About Us</a> </div>
  <div><a class="nav" href="">Programs</a> </div>
  <div><a class="nav" href="">Contacts</a> </div>
  <div><a class="nav main login" href="/login" role="button">Login</a> </div>
  <div><a class="nav main sign_up" href="/register" role="button">Sign Up</a> </div>
  
</div>

<%- include('partials/footer') %>

 
<%- include('partials/header') %>


<div class="navigation_bar">
  <div><a class="nav eBallot" href="">eBallot</a> </div>
  <div><a class="nav" href="">About Us</a> </div>
  <div><a class="nav" href="">Programs</a> </div>
  <div><a class="nav" href="">Contacts</a> </div>
  <div><a class="nav main login" href="/login" role="button">Login</a> </div>
  <div><a class="nav main sign_up" href="/register" role="button">Sign Up</a> </div>
  
</div>

<%- include('partials/footer') %>

 
body {
    margin: 0;
    padding: 0;
    height: 100vh;
    background: linear-gradient(to bottom, #004c98, #101214);
}

.navigation_bar {
    display: flex;
    flex-wrap: wrap;
    margin-top: 20px;
    justify-content: flex-end; /* Align items to the right */
}

.nav {
    text-decoration: none;
    color: white;
    margin-left: 30px;
}

.eBallot {
    margin-left: 15px;
}

.main {
    border: 1px solid white;
    border-radius: 20px;
    padding-top: 6px;
    padding-bottom: 6px;
    padding-right: 20px;
    padding-left: 20px;
}

.login,
.sign_up {
    border: 1px solid white;
    border-radius: 20px;
    padding: 6px 20px;
    margin-left: 15px; /* Keep some space between buttons */
    background-color: rgba(93, 163, 207, 0.2); /* Transparent background */
    color: white;
    text-decoration: none;
}

/* Adjustments for smaller screens */
@media (max-width: 768px) {
    .login,
    .sign_up {
        margin-left: 0; /* Remove left margin */
        margin-top: 10px; /* Add top margin to create space */
    }
}

 
body {
    margin: 0;
    padding: 0;
    height: 100vh;
    background: linear-gradient(to bottom, #0a4580, #101418);

}

.navigation_bar {
    display: flex;
    flex-wrap: wrap;
    margin-top: 20px;
}

.nav {
    text-decoration: none;
    color: white;
    margin-left: 30px;
}

.eBallot {
    margin-left: 15px;
}

.main {
    border: 1px solid white;
    border-radius: 20px;
    padding-top: 6px;
    padding-bottom: 6px;
    padding-right: 20px;
    padding-left: 20px;
}

.login {
    margin-left: 715px;
}

.sign_up {
    background-color: rgb(93, 163, 207);
}
 
#b3d9ff, #004080
 
.sign_up {
    background-color: rgb(93, 163, 207);
}
 
.login {
    margin-left: 715px;
}
 
#b3d9ff, #004080
 
 margin: 0;
    padding: 0;
    height: 100vh;
 
 /* Full viewport height */
 

        margin: 0;
        padding: 0;
        height: 100vh;
        /* Full viewport height */
        background: linear-gradient(to bottom, #04223f, #004080);
 
 body {
 
 margin: 0;
    padding: 0;
    height: 100vh; /* Full viewport height */
    background: linear-gradient(to bottom, blue 0%, blue 50%, white 50%, white 100%);
 
margin: 0;
    padding: 0;
    height: 100vh; /* Full viewport height */
    background: linear-gradient(to bottom, blue 0%, blue 50%, white 50%, white 100%);
 
   background: linear-gradient(to bottom, blue 50%, white 50%);
 
background-color: rgb(44, 44, 214);
 
<div class="jumbotron centered">
  <div class="container">

    
  </div>
</div>
 
<nav >
      <a class="nav" href="">eBallot</a>
      <a class="nav" href="">About Us</a>
      <a class="nav" href="">Programs</a>
      <a class="nav" href="">Contacts</a>
      <a class="nav" href="/register" role="button">Register</a>
      <a class="nav" href="/login" role="button">Login</a>
  </nav>
 
 margin-top:10px;
 
border: 1px solid white;
 
 padding-top:5px;
    padding-bottom:5px;
    padding-right: 5px;
    padding-left: 5px;
 
adding: 10px;
 
width: 10px;
    height: 10px;
 
class="nav sign_up"
 
class="nav login"
 
class="nav 
 
class="nav"
 
class="nav"
 
class="nav"
 
class="nav"
 
display: grid;
grid-template-columns:0.8fr 1fr 1fr 7fr 1fr 1fr;
 
 <div><a class="nav" href="/register" role="button">Register</a> </div>
 
12% 14% 14% 40% 12% 10%
 
 1fr 1fr 1fr 1fr 1fr 1fr
 
</div>
 
</div>
 
grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
 
grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;
 
flex-wrap: wrap;
 
</div>
 
 flex-wrap: wrap;
 
justify-content: center;
 
 justify-content: center;
 
*{
      background: linear-gradient(300deg, #00bfff, #ef8172);;
}

 
*{
    background-color: black;
}
 
  text-decoration-line: none;
 
<link rel="stylesheet" href="css/styles.css">
 
class="btn btn-dark btn-lg" 
 
class="btn btn-light btn-lg"
 
</nav>
 
 <i class="fas fa-key fa-6x"></i>
    <h1 class="display-3">Secrets</h1>
    <p class="lead">Don't keep your secrets, share them anonymously!</p>
    <hr>
 
